// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.7.1
// source: types.proto

package proto

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type PingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EthContract string `protobuf:"bytes,1,opt,name=ethContract,proto3" json:"ethContract,omitempty"`
	EthAddress  string `protobuf:"bytes,2,opt,name=ethAddress,proto3" json:"ethAddress,omitempty"`
	NeoContract string `protobuf:"bytes,3,opt,name=neoContract,proto3" json:"neoContract,omitempty"`
	NeoAddress  string `protobuf:"bytes,4,opt,name=neoAddress,proto3" json:"neoAddress,omitempty"`
}

func (x *PingResponse) Reset() {
	*x = PingResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PingResponse) ProtoMessage() {}

func (x *PingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PingResponse.ProtoReflect.Descriptor instead.
func (*PingResponse) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{0}
}

func (x *PingResponse) GetEthContract() string {
	if x != nil {
		return x.EthContract
	}
	return ""
}

func (x *PingResponse) GetEthAddress() string {
	if x != nil {
		return x.EthAddress
	}
	return ""
}

func (x *PingResponse) GetNeoContract() string {
	if x != nil {
		return x.NeoContract
	}
	return ""
}

func (x *PingResponse) GetNeoAddress() string {
	if x != nil {
		return x.NeoAddress
	}
	return ""
}

type DepositLockRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nep5TxHash string `protobuf:"bytes,1,opt,name=nep5TxHash,proto3" json:"nep5TxHash,omitempty"`
	RHash      string `protobuf:"bytes,2,opt,name=rHash,proto3" json:"rHash,omitempty"`
	Addr       string `protobuf:"bytes,3,opt,name=addr,proto3" json:"addr,omitempty"`
}

func (x *DepositLockRequest) Reset() {
	*x = DepositLockRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DepositLockRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DepositLockRequest) ProtoMessage() {}

func (x *DepositLockRequest) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DepositLockRequest.ProtoReflect.Descriptor instead.
func (*DepositLockRequest) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{1}
}

func (x *DepositLockRequest) GetNep5TxHash() string {
	if x != nil {
		return x.Nep5TxHash
	}
	return ""
}

func (x *DepositLockRequest) GetRHash() string {
	if x != nil {
		return x.RHash
	}
	return ""
}

func (x *DepositLockRequest) GetAddr() string {
	if x != nil {
		return x.Addr
	}
	return ""
}

type FetchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ROrigin      string `protobuf:"bytes,1,opt,name=rOrigin,proto3" json:"rOrigin,omitempty"`
	UserNep5Addr string `protobuf:"bytes,2,opt,name=userNep5Addr,proto3" json:"userNep5Addr,omitempty"`
}

func (x *FetchRequest) Reset() {
	*x = FetchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchRequest) ProtoMessage() {}

func (x *FetchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchRequest.ProtoReflect.Descriptor instead.
func (*FetchRequest) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{2}
}

func (x *FetchRequest) GetROrigin() string {
	if x != nil {
		return x.ROrigin
	}
	return ""
}

func (x *FetchRequest) GetUserNep5Addr() string {
	if x != nil {
		return x.UserNep5Addr
	}
	return ""
}

type ClaimRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ROrigin      string `protobuf:"bytes,1,opt,name=rOrigin,proto3" json:"rOrigin,omitempty"`
	UserNep5Addr string `protobuf:"bytes,2,opt,name=userNep5Addr,proto3" json:"userNep5Addr,omitempty"`
}

func (x *ClaimRequest) Reset() {
	*x = ClaimRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClaimRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClaimRequest) ProtoMessage() {}

func (x *ClaimRequest) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClaimRequest.ProtoReflect.Descriptor instead.
func (*ClaimRequest) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{3}
}

func (x *ClaimRequest) GetROrigin() string {
	if x != nil {
		return x.ROrigin
	}
	return ""
}

func (x *ClaimRequest) GetUserNep5Addr() string {
	if x != nil {
		return x.UserNep5Addr
	}
	return ""
}

type EventResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State    int64  `protobuf:"varint,1,opt,name=state,proto3" json:"state,omitempty"`
	StateStr string `protobuf:"bytes,2,opt,name=stateStr,proto3" json:"stateStr,omitempty"`
	RHash    string `protobuf:"bytes,3,opt,name=rHash,proto3" json:"rHash,omitempty"`
	TxHash   string `protobuf:"bytes,4,opt,name=txHash,proto3" json:"txHash,omitempty"`
}

func (x *EventResponse) Reset() {
	*x = EventResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventResponse) ProtoMessage() {}

func (x *EventResponse) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventResponse.ProtoReflect.Descriptor instead.
func (*EventResponse) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{4}
}

func (x *EventResponse) GetState() int64 {
	if x != nil {
		return x.State
	}
	return 0
}

func (x *EventResponse) GetStateStr() string {
	if x != nil {
		return x.StateStr
	}
	return ""
}

func (x *EventResponse) GetRHash() string {
	if x != nil {
		return x.RHash
	}
	return ""
}

func (x *EventResponse) GetTxHash() string {
	if x != nil {
		return x.TxHash
	}
	return ""
}

type LockerStateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State             int64  `protobuf:"varint,1,opt,name=state,proto3" json:"state,omitempty"`
	StateStr          string `protobuf:"bytes,2,opt,name=stateStr,proto3" json:"stateStr,omitempty"`
	RHash             string `protobuf:"bytes,3,opt,name=rHash,proto3" json:"rHash,omitempty"`
	ROrigin           string `protobuf:"bytes,4,opt,name=rOrigin,proto3" json:"rOrigin,omitempty"`
	Amount            int64  `protobuf:"varint,5,opt,name=amount,proto3" json:"amount,omitempty"`
	LockedNeoHash     string `protobuf:"bytes,6,opt,name=lockedNeoHash,proto3" json:"lockedNeoHash,omitempty"`
	LockedNeoHeight   uint32 `protobuf:"varint,7,opt,name=lockedNeoHeight,proto3" json:"lockedNeoHeight,omitempty"`
	LockedEthHash     string `protobuf:"bytes,8,opt,name=lockedEthHash,proto3" json:"lockedEthHash,omitempty"`
	LockedEthHeight   uint32 `protobuf:"varint,9,opt,name=lockedEthHeight,proto3" json:"lockedEthHeight,omitempty"`
	UnlockedNeoHash   string `protobuf:"bytes,10,opt,name=unlockedNeoHash,proto3" json:"unlockedNeoHash,omitempty"`
	UnlockedNeoHeight uint32 `protobuf:"varint,11,opt,name=unlockedNeoHeight,proto3" json:"unlockedNeoHeight,omitempty"`
	UnlockedEthHash   string `protobuf:"bytes,12,opt,name=unlockedEthHash,proto3" json:"unlockedEthHash,omitempty"`
	UnlockedEthHeight uint32 `protobuf:"varint,13,opt,name=unlockedEthHeight,proto3" json:"unlockedEthHeight,omitempty"`
	NeoTimerInterval  uint32 `protobuf:"varint,14,opt,name=neoTimerInterval,proto3" json:"neoTimerInterval,omitempty"`
	EthTimerInterval  uint32 `protobuf:"varint,15,opt,name=ethTimerInterval,proto3" json:"ethTimerInterval,omitempty"`
	StartTime         string `protobuf:"bytes,16,opt,name=startTime,proto3" json:"startTime,omitempty"`
	LastModifyTime    string `protobuf:"bytes,17,opt,name=lastModifyTime,proto3" json:"lastModifyTime,omitempty"`
	NeoUserAddr       string `protobuf:"bytes,18,opt,name=neoUserAddr,proto3" json:"neoUserAddr,omitempty"`
	EthUserAddr       string `protobuf:"bytes,19,opt,name=ethUserAddr,proto3" json:"ethUserAddr,omitempty"`
	NeoTimeout        bool   `protobuf:"varint,20,opt,name=neoTimeout,proto3" json:"neoTimeout,omitempty"`
	EthTimeout        bool   `protobuf:"varint,21,opt,name=ethTimeout,proto3" json:"ethTimeout,omitempty"`
	Fail              bool   `protobuf:"varint,22,opt,name=fail,proto3" json:"fail,omitempty"`
	Remark            string `protobuf:"bytes,23,opt,name=remark,proto3" json:"remark,omitempty"`
}

func (x *LockerStateResponse) Reset() {
	*x = LockerStateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LockerStateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LockerStateResponse) ProtoMessage() {}

func (x *LockerStateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LockerStateResponse.ProtoReflect.Descriptor instead.
func (*LockerStateResponse) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{5}
}

func (x *LockerStateResponse) GetState() int64 {
	if x != nil {
		return x.State
	}
	return 0
}

func (x *LockerStateResponse) GetStateStr() string {
	if x != nil {
		return x.StateStr
	}
	return ""
}

func (x *LockerStateResponse) GetRHash() string {
	if x != nil {
		return x.RHash
	}
	return ""
}

func (x *LockerStateResponse) GetROrigin() string {
	if x != nil {
		return x.ROrigin
	}
	return ""
}

func (x *LockerStateResponse) GetAmount() int64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *LockerStateResponse) GetLockedNeoHash() string {
	if x != nil {
		return x.LockedNeoHash
	}
	return ""
}

func (x *LockerStateResponse) GetLockedNeoHeight() uint32 {
	if x != nil {
		return x.LockedNeoHeight
	}
	return 0
}

func (x *LockerStateResponse) GetLockedEthHash() string {
	if x != nil {
		return x.LockedEthHash
	}
	return ""
}

func (x *LockerStateResponse) GetLockedEthHeight() uint32 {
	if x != nil {
		return x.LockedEthHeight
	}
	return 0
}

func (x *LockerStateResponse) GetUnlockedNeoHash() string {
	if x != nil {
		return x.UnlockedNeoHash
	}
	return ""
}

func (x *LockerStateResponse) GetUnlockedNeoHeight() uint32 {
	if x != nil {
		return x.UnlockedNeoHeight
	}
	return 0
}

func (x *LockerStateResponse) GetUnlockedEthHash() string {
	if x != nil {
		return x.UnlockedEthHash
	}
	return ""
}

func (x *LockerStateResponse) GetUnlockedEthHeight() uint32 {
	if x != nil {
		return x.UnlockedEthHeight
	}
	return 0
}

func (x *LockerStateResponse) GetNeoTimerInterval() uint32 {
	if x != nil {
		return x.NeoTimerInterval
	}
	return 0
}

func (x *LockerStateResponse) GetEthTimerInterval() uint32 {
	if x != nil {
		return x.EthTimerInterval
	}
	return 0
}

func (x *LockerStateResponse) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

func (x *LockerStateResponse) GetLastModifyTime() string {
	if x != nil {
		return x.LastModifyTime
	}
	return ""
}

func (x *LockerStateResponse) GetNeoUserAddr() string {
	if x != nil {
		return x.NeoUserAddr
	}
	return ""
}

func (x *LockerStateResponse) GetEthUserAddr() string {
	if x != nil {
		return x.EthUserAddr
	}
	return ""
}

func (x *LockerStateResponse) GetNeoTimeout() bool {
	if x != nil {
		return x.NeoTimeout
	}
	return false
}

func (x *LockerStateResponse) GetEthTimeout() bool {
	if x != nil {
		return x.EthTimeout
	}
	return false
}

func (x *LockerStateResponse) GetFail() bool {
	if x != nil {
		return x.Fail
	}
	return false
}

func (x *LockerStateResponse) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

type Offset struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count  int32 `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	Offset int32 `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
}

func (x *Offset) Reset() {
	*x = Offset{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Offset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Offset) ProtoMessage() {}

func (x *Offset) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Offset.ProtoReflect.Descriptor instead.
func (*Offset) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{6}
}

func (x *Offset) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *Offset) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

type ParamAndOffset struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value  string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	Count  int32  `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	Offset int32  `protobuf:"varint,3,opt,name=offset,proto3" json:"offset,omitempty"`
}

func (x *ParamAndOffset) Reset() {
	*x = ParamAndOffset{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParamAndOffset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParamAndOffset) ProtoMessage() {}

func (x *ParamAndOffset) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParamAndOffset.ProtoReflect.Descriptor instead.
func (*ParamAndOffset) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{7}
}

func (x *ParamAndOffset) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *ParamAndOffset) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *ParamAndOffset) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

type LockerStatesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Lockers []*LockerStateResponse `protobuf:"bytes,1,rep,name=lockers,proto3" json:"lockers,omitempty"`
}

func (x *LockerStatesResponse) Reset() {
	*x = LockerStatesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LockerStatesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LockerStatesResponse) ProtoMessage() {}

func (x *LockerStatesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LockerStatesResponse.ProtoReflect.Descriptor instead.
func (*LockerStatesResponse) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{8}
}

func (x *LockerStatesResponse) GetLockers() []*LockerStateResponse {
	if x != nil {
		return x.Lockers
	}
	return nil
}

type LockerInfosCountResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Counts map[string]int32 `protobuf:"bytes,1,rep,name=counts,proto3" json:"counts,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *LockerInfosCountResponse) Reset() {
	*x = LockerInfosCountResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LockerInfosCountResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LockerInfosCountResponse) ProtoMessage() {}

func (x *LockerInfosCountResponse) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LockerInfosCountResponse.ProtoReflect.Descriptor instead.
func (*LockerInfosCountResponse) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{9}
}

func (x *LockerInfosCountResponse) GetCounts() map[string]int32 {
	if x != nil {
		return x.Counts
	}
	return nil
}

type HashTimerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RHash          string `protobuf:"bytes,1,opt,name=rHash,proto3" json:"rHash,omitempty"`
	ROrigin        string `protobuf:"bytes,2,opt,name=rOrigin,proto3" json:"rOrigin,omitempty"`
	Amount         int64  `protobuf:"varint,3,opt,name=amount,proto3" json:"amount,omitempty"`
	UserAddr       string `protobuf:"bytes,4,opt,name=userAddr,proto3" json:"userAddr,omitempty"`
	LockedHeight   uint32 `protobuf:"varint,5,opt,name=lockedHeight,proto3" json:"lockedHeight,omitempty"`
	UnlockedHeight uint32 `protobuf:"varint,6,opt,name=unlockedHeight,proto3" json:"unlockedHeight,omitempty"`
}

func (x *HashTimerResponse) Reset() {
	*x = HashTimerResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HashTimerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HashTimerResponse) ProtoMessage() {}

func (x *HashTimerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HashTimerResponse.ProtoReflect.Descriptor instead.
func (*HashTimerResponse) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{10}
}

func (x *HashTimerResponse) GetRHash() string {
	if x != nil {
		return x.RHash
	}
	return ""
}

func (x *HashTimerResponse) GetROrigin() string {
	if x != nil {
		return x.ROrigin
	}
	return ""
}

func (x *HashTimerResponse) GetAmount() int64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *HashTimerResponse) GetUserAddr() string {
	if x != nil {
		return x.UserAddr
	}
	return ""
}

func (x *HashTimerResponse) GetLockedHeight() uint32 {
	if x != nil {
		return x.LockedHeight
	}
	return 0
}

func (x *HashTimerResponse) GetUnlockedHeight() uint32 {
	if x != nil {
		return x.UnlockedHeight
	}
	return 0
}

type Boolean struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value bool `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Boolean) Reset() {
	*x = Boolean{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Boolean) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Boolean) ProtoMessage() {}

func (x *Boolean) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Boolean.ProtoReflect.Descriptor instead.
func (*Boolean) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{11}
}

func (x *Boolean) GetValue() bool {
	if x != nil {
		return x.Value
	}
	return false
}

type String struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *String) Reset() {
	*x = String{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *String) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*String) ProtoMessage() {}

func (x *String) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use String.ProtoReflect.Descriptor instead.
func (*String) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{12}
}

func (x *String) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

var File_types_proto protoreflect.FileDescriptor

var file_types_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0x92, 0x01, 0x0a, 0x0c, 0x50, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x65, 0x74, 0x68, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x65, 0x74, 0x68, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x74, 0x68, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x74, 0x68, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x6e, 0x65, 0x6f, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6e, 0x65, 0x6f, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x6e, 0x65, 0x6f, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6e, 0x65, 0x6f, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x22, 0x5e, 0x0a, 0x12, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x4c,
	0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x6e, 0x65,
	0x70, 0x35, 0x54, 0x78, 0x48, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x6e, 0x65, 0x70, 0x35, 0x54, 0x78, 0x48, 0x61, 0x73, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x48,
	0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x48, 0x61, 0x73, 0x68,
	0x12, 0x12, 0x0a, 0x04, 0x61, 0x64, 0x64, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x61, 0x64, 0x64, 0x72, 0x22, 0x4c, 0x0a, 0x0c, 0x46, 0x65, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x12, 0x22,
	0x0a, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x65, 0x70, 0x35, 0x41, 0x64, 0x64, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x65, 0x70, 0x35, 0x41, 0x64,
	0x64, 0x72, 0x22, 0x4c, 0x0a, 0x0c, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x12, 0x22, 0x0a, 0x0c,
	0x75, 0x73, 0x65, 0x72, 0x4e, 0x65, 0x70, 0x35, 0x41, 0x64, 0x64, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x65, 0x70, 0x35, 0x41, 0x64, 0x64, 0x72,
	0x22, 0x6f, 0x0a, 0x0d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x53, 0x74, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x53, 0x74, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x48, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x72, 0x48, 0x61, 0x73, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x78, 0x48,
	0x61, 0x73, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x78, 0x48, 0x61, 0x73,
	0x68, 0x22, 0xad, 0x06, 0x0a, 0x13, 0x4c, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x74, 0x65, 0x53, 0x74, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x73, 0x74, 0x61, 0x74, 0x65, 0x53, 0x74, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x72,
	0x48, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x48, 0x61, 0x73,
	0x68, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x72, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x4e, 0x65, 0x6f,
	0x48, 0x61, 0x73, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6c, 0x6f, 0x63, 0x6b,
	0x65, 0x64, 0x4e, 0x65, 0x6f, 0x48, 0x61, 0x73, 0x68, 0x12, 0x28, 0x0a, 0x0f, 0x6c, 0x6f, 0x63,
	0x6b, 0x65, 0x64, 0x4e, 0x65, 0x6f, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0f, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x4e, 0x65, 0x6f, 0x48, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x45, 0x74, 0x68,
	0x48, 0x61, 0x73, 0x68, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6c, 0x6f, 0x63, 0x6b,
	0x65, 0x64, 0x45, 0x74, 0x68, 0x48, 0x61, 0x73, 0x68, 0x12, 0x28, 0x0a, 0x0f, 0x6c, 0x6f, 0x63,
	0x6b, 0x65, 0x64, 0x45, 0x74, 0x68, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0f, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x45, 0x74, 0x68, 0x48, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x4e,
	0x65, 0x6f, 0x48, 0x61, 0x73, 0x68, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x75, 0x6e,
	0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x4e, 0x65, 0x6f, 0x48, 0x61, 0x73, 0x68, 0x12, 0x2c, 0x0a,
	0x11, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x4e, 0x65, 0x6f, 0x48, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b,
	0x65, 0x64, 0x4e, 0x65, 0x6f, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x75,
	0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x45, 0x74, 0x68, 0x48, 0x61, 0x73, 0x68, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x45, 0x74,
	0x68, 0x48, 0x61, 0x73, 0x68, 0x12, 0x2c, 0x0a, 0x11, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x65,
	0x64, 0x45, 0x74, 0x68, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x11, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x45, 0x74, 0x68, 0x48, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x6e, 0x65, 0x6f, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x6e,
	0x65, 0x6f, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12,
	0x2a, 0x0a, 0x10, 0x65, 0x74, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x65, 0x74, 0x68, 0x54, 0x69,
	0x6d, 0x65, 0x72, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x6c, 0x61, 0x73,
	0x74, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x6e, 0x65, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6e, 0x65, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x41,
	0x64, 0x64, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x65, 0x74, 0x68, 0x55, 0x73, 0x65, 0x72, 0x41, 0x64,
	0x64, 0x72, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x65, 0x74, 0x68, 0x55, 0x73, 0x65,
	0x72, 0x41, 0x64, 0x64, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x6e, 0x65, 0x6f, 0x54, 0x69, 0x6d, 0x65,
	0x6f, 0x75, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x6e, 0x65, 0x6f, 0x54, 0x69,
	0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x74, 0x68, 0x54, 0x69, 0x6d, 0x65,
	0x6f, 0x75, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x65, 0x74, 0x68, 0x54, 0x69,
	0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x61, 0x69, 0x6c, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x04, 0x66, 0x61, 0x69, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x6d,
	0x61, 0x72, 0x6b, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72,
	0x6b, 0x22, 0x36, 0x0a, 0x06, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x22, 0x54, 0x0a, 0x0e, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x41, 0x6e, 0x64, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x22,
	0x4c, 0x0a, 0x14, 0x4c, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x07, 0x6c, 0x6f, 0x63, 0x6b, 0x65,
	0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x4c, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x52, 0x07, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x73, 0x22, 0x9a, 0x01,
	0x0a, 0x18, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43, 0x0a, 0x06, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x1a,
	0x39, 0x0a, 0x0b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xc3, 0x01, 0x0a, 0x11, 0x48,
	0x61, 0x73, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x72, 0x48, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x72, 0x48, 0x61, 0x73, 0x68, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x4f, 0x72, 0x69, 0x67, 0x69,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e,
	0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72,
	0x41, 0x64, 0x64, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72,
	0x41, 0x64, 0x64, 0x72, 0x12, 0x22, 0x0a, 0x0c, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x48, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x6c, 0x6f, 0x63, 0x6b,
	0x65, 0x64, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x75, 0x6e, 0x6c, 0x6f,
	0x63, 0x6b, 0x65, 0x64, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0e, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x22, 0x1f, 0x0a, 0x07, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x22, 0x1e, 0x0a, 0x06, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x32, 0xa1, 0x01, 0x0a, 0x0a, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x41, 0x50, 0x49,
	0x12, 0x4b, 0x0a, 0x04, 0x4c, 0x6f, 0x63, 0x6b, 0x12, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x4c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c,
	0x65, 0x61, 0x6e, 0x22, 0x18, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x12, 0x22, 0x0d, 0x2f, 0x64, 0x65,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x2f, 0x6c, 0x6f, 0x63, 0x6b, 0x3a, 0x01, 0x2a, 0x12, 0x46, 0x0a,
	0x05, 0x46, 0x65, 0x74, 0x63, 0x68, 0x12, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46,
	0x65, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x22, 0x19, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x13, 0x22, 0x0e, 0x2f, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x2f, 0x66, 0x65, 0x74,
	0x63, 0x68, 0x3a, 0x01, 0x2a, 0x32, 0x56, 0x0a, 0x0b, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61,
	0x77, 0x41, 0x50, 0x49, 0x12, 0x47, 0x0a, 0x05, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x12, 0x13, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x22, 0x1a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x14, 0x22, 0x0f, 0x2f, 0x77, 0x69, 0x74, 0x68,
	0x64, 0x72, 0x61, 0x77, 0x2f, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x3a, 0x01, 0x2a, 0x32, 0x59, 0x0a,
	0x08, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x50, 0x49, 0x12, 0x4d, 0x0a, 0x05, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x14, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x14, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0e, 0x12, 0x0c, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x30, 0x01, 0x32, 0xe1, 0x03, 0x0a, 0x07, 0x49, 0x6e, 0x66,
	0x6f, 0x41, 0x50, 0x49, 0x12, 0x47, 0x0a, 0x04, 0x50, 0x69, 0x6e, 0x67, 0x12, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x1a, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x69, 0x6e,
	0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x12, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x0c, 0x12, 0x0a, 0x2f, 0x69, 0x6e, 0x66, 0x6f, 0x2f, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x51, 0x0a,
	0x0a, 0x4c, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0d, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x1a, 0x1a, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x4c, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x18, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x12, 0x12, 0x10,
	0x2f, 0x69, 0x6e, 0x66, 0x6f, 0x2f, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x72, 0x0a, 0x16, 0x4c, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x42,
	0x79, 0x45, 0x72, 0x63, 0x32, 0x30, 0x41, 0x64, 0x64, 0x72, 0x12, 0x15, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x41, 0x6e, 0x64, 0x4f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x1a, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x6f, 0x63, 0x6b, 0x65, 0x72,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x24,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x12, 0x1c, 0x2f, 0x69, 0x6e, 0x66, 0x6f, 0x2f, 0x6c, 0x6f,
	0x63, 0x6b, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x42, 0x79, 0x45, 0x72, 0x63, 0x32, 0x30,
	0x41, 0x64, 0x64, 0x72, 0x12, 0x70, 0x0a, 0x15, 0x4c, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x73, 0x42, 0x79, 0x4e, 0x65, 0x70, 0x35, 0x41, 0x64, 0x64, 0x72, 0x12, 0x15, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x41, 0x6e, 0x64, 0x4f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x1a, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x6f, 0x63,
	0x6b, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x23, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x12, 0x1b, 0x2f, 0x69, 0x6e, 0x66, 0x6f,
	0x2f, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x42, 0x79, 0x4e, 0x65,
	0x70, 0x35, 0x41, 0x64, 0x64, 0x72, 0x12, 0x54, 0x0a, 0x0b, 0x4c, 0x6f, 0x63, 0x6b, 0x65, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x73, 0x12, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x1a, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x6f, 0x63,
	0x6b, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x19, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x13, 0x12, 0x11, 0x2f, 0x69, 0x6e, 0x66, 0x6f,
	0x2f, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x32, 0xb5, 0x02, 0x0a,
	0x08, 0x44, 0x65, 0x62, 0x75, 0x67, 0x41, 0x50, 0x49, 0x12, 0x4e, 0x0a, 0x09, 0x48, 0x61, 0x73,
	0x68, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x12, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x1a, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x48, 0x61,
	0x73, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x18, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x12, 0x12, 0x10, 0x2f, 0x64, 0x65, 0x62, 0x75, 0x67, 0x2f,
	0x68, 0x61, 0x73, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x12, 0x6c, 0x0a, 0x10, 0x4c, 0x6f, 0x63,
	0x6b, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6c, 0x6f,
	0x63, 0x6b, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19, 0x12, 0x17,
	0x2f, 0x64, 0x65, 0x62, 0x75, 0x67, 0x2f, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x6b, 0x0a, 0x12, 0x4c, 0x6f, 0x63, 0x6b, 0x65,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x42, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x15, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x41, 0x6e, 0x64, 0x4f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x1a, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x6f, 0x63,
	0x6b, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x21, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x12, 0x19, 0x2f, 0x64, 0x65, 0x62, 0x75,
	0x67, 0x2f, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x42, 0x79, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x42, 0x09, 0x5a, 0x07, 0x2e, 0x3b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_types_proto_rawDescOnce sync.Once
	file_types_proto_rawDescData = file_types_proto_rawDesc
)

func file_types_proto_rawDescGZIP() []byte {
	file_types_proto_rawDescOnce.Do(func() {
		file_types_proto_rawDescData = protoimpl.X.CompressGZIP(file_types_proto_rawDescData)
	})
	return file_types_proto_rawDescData
}

var file_types_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_types_proto_goTypes = []interface{}{
	(*PingResponse)(nil),             // 0: proto.PingResponse
	(*DepositLockRequest)(nil),       // 1: proto.DepositLockRequest
	(*FetchRequest)(nil),             // 2: proto.FetchRequest
	(*ClaimRequest)(nil),             // 3: proto.ClaimRequest
	(*EventResponse)(nil),            // 4: proto.EventResponse
	(*LockerStateResponse)(nil),      // 5: proto.LockerStateResponse
	(*Offset)(nil),                   // 6: proto.Offset
	(*ParamAndOffset)(nil),           // 7: proto.ParamAndOffset
	(*LockerStatesResponse)(nil),     // 8: proto.LockerStatesResponse
	(*LockerInfosCountResponse)(nil), // 9: proto.lockerInfosCountResponse
	(*HashTimerResponse)(nil),        // 10: proto.HashTimerResponse
	(*Boolean)(nil),                  // 11: proto.Boolean
	(*String)(nil),                   // 12: proto.String
	nil,                              // 13: proto.lockerInfosCountResponse.CountsEntry
	(*empty.Empty)(nil),              // 14: google.protobuf.Empty
}
var file_types_proto_depIdxs = []int32{
	5,  // 0: proto.LockerStatesResponse.lockers:type_name -> proto.LockerStateResponse
	13, // 1: proto.lockerInfosCountResponse.counts:type_name -> proto.lockerInfosCountResponse.CountsEntry
	1,  // 2: proto.DepositAPI.Lock:input_type -> proto.DepositLockRequest
	2,  // 3: proto.DepositAPI.Fetch:input_type -> proto.FetchRequest
	3,  // 4: proto.WithdrawAPI.Claim:input_type -> proto.ClaimRequest
	14, // 5: proto.EventAPI.Event:input_type -> google.protobuf.Empty
	14, // 6: proto.InfoAPI.Ping:input_type -> google.protobuf.Empty
	12, // 7: proto.InfoAPI.LockerInfo:input_type -> proto.String
	7,  // 8: proto.InfoAPI.LockerInfosByErc20Addr:input_type -> proto.ParamAndOffset
	7,  // 9: proto.InfoAPI.LockerInfosByNep5Addr:input_type -> proto.ParamAndOffset
	6,  // 10: proto.InfoAPI.LockerInfos:input_type -> proto.Offset
	12, // 11: proto.DebugAPI.HashTimer:input_type -> proto.String
	14, // 12: proto.DebugAPI.LockerInfosCount:input_type -> google.protobuf.Empty
	7,  // 13: proto.DebugAPI.LockerInfosByState:input_type -> proto.ParamAndOffset
	11, // 14: proto.DepositAPI.Lock:output_type -> proto.Boolean
	12, // 15: proto.DepositAPI.Fetch:output_type -> proto.String
	12, // 16: proto.WithdrawAPI.Claim:output_type -> proto.String
	4,  // 17: proto.EventAPI.Event:output_type -> proto.EventResponse
	0,  // 18: proto.InfoAPI.Ping:output_type -> proto.PingResponse
	5,  // 19: proto.InfoAPI.LockerInfo:output_type -> proto.LockerStateResponse
	8,  // 20: proto.InfoAPI.LockerInfosByErc20Addr:output_type -> proto.LockerStatesResponse
	8,  // 21: proto.InfoAPI.LockerInfosByNep5Addr:output_type -> proto.LockerStatesResponse
	8,  // 22: proto.InfoAPI.LockerInfos:output_type -> proto.LockerStatesResponse
	10, // 23: proto.DebugAPI.HashTimer:output_type -> proto.HashTimerResponse
	9,  // 24: proto.DebugAPI.LockerInfosCount:output_type -> proto.lockerInfosCountResponse
	8,  // 25: proto.DebugAPI.LockerInfosByState:output_type -> proto.LockerStatesResponse
	14, // [14:26] is the sub-list for method output_type
	2,  // [2:14] is the sub-list for method input_type
	2,  // [2:2] is the sub-list for extension type_name
	2,  // [2:2] is the sub-list for extension extendee
	0,  // [0:2] is the sub-list for field type_name
}

func init() { file_types_proto_init() }
func file_types_proto_init() {
	if File_types_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_types_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PingResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DepositLockRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FetchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClaimRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LockerStateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Offset); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ParamAndOffset); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LockerStatesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LockerInfosCountResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HashTimerResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Boolean); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*String); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_types_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   5,
		},
		GoTypes:           file_types_proto_goTypes,
		DependencyIndexes: file_types_proto_depIdxs,
		MessageInfos:      file_types_proto_msgTypes,
	}.Build()
	File_types_proto = out.File
	file_types_proto_rawDesc = nil
	file_types_proto_goTypes = nil
	file_types_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// DepositAPIClient is the client API for DepositAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DepositAPIClient interface {
	Lock(ctx context.Context, in *DepositLockRequest, opts ...grpc.CallOption) (*Boolean, error)
	Fetch(ctx context.Context, in *FetchRequest, opts ...grpc.CallOption) (*String, error)
}

type depositAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewDepositAPIClient(cc grpc.ClientConnInterface) DepositAPIClient {
	return &depositAPIClient{cc}
}

func (c *depositAPIClient) Lock(ctx context.Context, in *DepositLockRequest, opts ...grpc.CallOption) (*Boolean, error) {
	out := new(Boolean)
	err := c.cc.Invoke(ctx, "/proto.DepositAPI/Lock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *depositAPIClient) Fetch(ctx context.Context, in *FetchRequest, opts ...grpc.CallOption) (*String, error) {
	out := new(String)
	err := c.cc.Invoke(ctx, "/proto.DepositAPI/Fetch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DepositAPIServer is the server API for DepositAPI service.
type DepositAPIServer interface {
	Lock(context.Context, *DepositLockRequest) (*Boolean, error)
	Fetch(context.Context, *FetchRequest) (*String, error)
}

// UnimplementedDepositAPIServer can be embedded to have forward compatible implementations.
type UnimplementedDepositAPIServer struct {
}

func (*UnimplementedDepositAPIServer) Lock(context.Context, *DepositLockRequest) (*Boolean, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Lock not implemented")
}
func (*UnimplementedDepositAPIServer) Fetch(context.Context, *FetchRequest) (*String, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Fetch not implemented")
}

func RegisterDepositAPIServer(s *grpc.Server, srv DepositAPIServer) {
	s.RegisterService(&_DepositAPI_serviceDesc, srv)
}

func _DepositAPI_Lock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DepositLockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DepositAPIServer).Lock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DepositAPI/Lock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DepositAPIServer).Lock(ctx, req.(*DepositLockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DepositAPI_Fetch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DepositAPIServer).Fetch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DepositAPI/Fetch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DepositAPIServer).Fetch(ctx, req.(*FetchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _DepositAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.DepositAPI",
	HandlerType: (*DepositAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Lock",
			Handler:    _DepositAPI_Lock_Handler,
		},
		{
			MethodName: "Fetch",
			Handler:    _DepositAPI_Fetch_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "types.proto",
}

// WithdrawAPIClient is the client API for WithdrawAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type WithdrawAPIClient interface {
	Claim(ctx context.Context, in *ClaimRequest, opts ...grpc.CallOption) (*String, error)
}

type withdrawAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewWithdrawAPIClient(cc grpc.ClientConnInterface) WithdrawAPIClient {
	return &withdrawAPIClient{cc}
}

func (c *withdrawAPIClient) Claim(ctx context.Context, in *ClaimRequest, opts ...grpc.CallOption) (*String, error) {
	out := new(String)
	err := c.cc.Invoke(ctx, "/proto.WithdrawAPI/Claim", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WithdrawAPIServer is the server API for WithdrawAPI service.
type WithdrawAPIServer interface {
	Claim(context.Context, *ClaimRequest) (*String, error)
}

// UnimplementedWithdrawAPIServer can be embedded to have forward compatible implementations.
type UnimplementedWithdrawAPIServer struct {
}

func (*UnimplementedWithdrawAPIServer) Claim(context.Context, *ClaimRequest) (*String, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Claim not implemented")
}

func RegisterWithdrawAPIServer(s *grpc.Server, srv WithdrawAPIServer) {
	s.RegisterService(&_WithdrawAPI_serviceDesc, srv)
}

func _WithdrawAPI_Claim_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClaimRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WithdrawAPIServer).Claim(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.WithdrawAPI/Claim",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WithdrawAPIServer).Claim(ctx, req.(*ClaimRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _WithdrawAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.WithdrawAPI",
	HandlerType: (*WithdrawAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Claim",
			Handler:    _WithdrawAPI_Claim_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "types.proto",
}

// EventAPIClient is the client API for EventAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type EventAPIClient interface {
	Event(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (EventAPI_EventClient, error)
}

type eventAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewEventAPIClient(cc grpc.ClientConnInterface) EventAPIClient {
	return &eventAPIClient{cc}
}

func (c *eventAPIClient) Event(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (EventAPI_EventClient, error) {
	stream, err := c.cc.NewStream(ctx, &_EventAPI_serviceDesc.Streams[0], "/proto.EventAPI/Event", opts...)
	if err != nil {
		return nil, err
	}
	x := &eventAPIEventClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type EventAPI_EventClient interface {
	Recv() (*EventResponse, error)
	grpc.ClientStream
}

type eventAPIEventClient struct {
	grpc.ClientStream
}

func (x *eventAPIEventClient) Recv() (*EventResponse, error) {
	m := new(EventResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// EventAPIServer is the server API for EventAPI service.
type EventAPIServer interface {
	Event(*empty.Empty, EventAPI_EventServer) error
}

// UnimplementedEventAPIServer can be embedded to have forward compatible implementations.
type UnimplementedEventAPIServer struct {
}

func (*UnimplementedEventAPIServer) Event(*empty.Empty, EventAPI_EventServer) error {
	return status.Errorf(codes.Unimplemented, "method Event not implemented")
}

func RegisterEventAPIServer(s *grpc.Server, srv EventAPIServer) {
	s.RegisterService(&_EventAPI_serviceDesc, srv)
}

func _EventAPI_Event_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(empty.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EventAPIServer).Event(m, &eventAPIEventServer{stream})
}

type EventAPI_EventServer interface {
	Send(*EventResponse) error
	grpc.ServerStream
}

type eventAPIEventServer struct {
	grpc.ServerStream
}

func (x *eventAPIEventServer) Send(m *EventResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _EventAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.EventAPI",
	HandlerType: (*EventAPIServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Event",
			Handler:       _EventAPI_Event_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "types.proto",
}

// InfoAPIClient is the client API for InfoAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type InfoAPIClient interface {
	Ping(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*PingResponse, error)
	LockerInfo(ctx context.Context, in *String, opts ...grpc.CallOption) (*LockerStateResponse, error)
	LockerInfosByErc20Addr(ctx context.Context, in *ParamAndOffset, opts ...grpc.CallOption) (*LockerStatesResponse, error)
	LockerInfosByNep5Addr(ctx context.Context, in *ParamAndOffset, opts ...grpc.CallOption) (*LockerStatesResponse, error)
	LockerInfos(ctx context.Context, in *Offset, opts ...grpc.CallOption) (*LockerStatesResponse, error)
}

type infoAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewInfoAPIClient(cc grpc.ClientConnInterface) InfoAPIClient {
	return &infoAPIClient{cc}
}

func (c *infoAPIClient) Ping(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*PingResponse, error) {
	out := new(PingResponse)
	err := c.cc.Invoke(ctx, "/proto.InfoAPI/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infoAPIClient) LockerInfo(ctx context.Context, in *String, opts ...grpc.CallOption) (*LockerStateResponse, error) {
	out := new(LockerStateResponse)
	err := c.cc.Invoke(ctx, "/proto.InfoAPI/LockerInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infoAPIClient) LockerInfosByErc20Addr(ctx context.Context, in *ParamAndOffset, opts ...grpc.CallOption) (*LockerStatesResponse, error) {
	out := new(LockerStatesResponse)
	err := c.cc.Invoke(ctx, "/proto.InfoAPI/LockerInfosByErc20Addr", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infoAPIClient) LockerInfosByNep5Addr(ctx context.Context, in *ParamAndOffset, opts ...grpc.CallOption) (*LockerStatesResponse, error) {
	out := new(LockerStatesResponse)
	err := c.cc.Invoke(ctx, "/proto.InfoAPI/LockerInfosByNep5Addr", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infoAPIClient) LockerInfos(ctx context.Context, in *Offset, opts ...grpc.CallOption) (*LockerStatesResponse, error) {
	out := new(LockerStatesResponse)
	err := c.cc.Invoke(ctx, "/proto.InfoAPI/LockerInfos", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InfoAPIServer is the server API for InfoAPI service.
type InfoAPIServer interface {
	Ping(context.Context, *empty.Empty) (*PingResponse, error)
	LockerInfo(context.Context, *String) (*LockerStateResponse, error)
	LockerInfosByErc20Addr(context.Context, *ParamAndOffset) (*LockerStatesResponse, error)
	LockerInfosByNep5Addr(context.Context, *ParamAndOffset) (*LockerStatesResponse, error)
	LockerInfos(context.Context, *Offset) (*LockerStatesResponse, error)
}

// UnimplementedInfoAPIServer can be embedded to have forward compatible implementations.
type UnimplementedInfoAPIServer struct {
}

func (*UnimplementedInfoAPIServer) Ping(context.Context, *empty.Empty) (*PingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (*UnimplementedInfoAPIServer) LockerInfo(context.Context, *String) (*LockerStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LockerInfo not implemented")
}
func (*UnimplementedInfoAPIServer) LockerInfosByErc20Addr(context.Context, *ParamAndOffset) (*LockerStatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LockerInfosByErc20Addr not implemented")
}
func (*UnimplementedInfoAPIServer) LockerInfosByNep5Addr(context.Context, *ParamAndOffset) (*LockerStatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LockerInfosByNep5Addr not implemented")
}
func (*UnimplementedInfoAPIServer) LockerInfos(context.Context, *Offset) (*LockerStatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LockerInfos not implemented")
}

func RegisterInfoAPIServer(s *grpc.Server, srv InfoAPIServer) {
	s.RegisterService(&_InfoAPI_serviceDesc, srv)
}

func _InfoAPI_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfoAPIServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.InfoAPI/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfoAPIServer).Ping(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfoAPI_LockerInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(String)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfoAPIServer).LockerInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.InfoAPI/LockerInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfoAPIServer).LockerInfo(ctx, req.(*String))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfoAPI_LockerInfosByErc20Addr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ParamAndOffset)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfoAPIServer).LockerInfosByErc20Addr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.InfoAPI/LockerInfosByErc20Addr",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfoAPIServer).LockerInfosByErc20Addr(ctx, req.(*ParamAndOffset))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfoAPI_LockerInfosByNep5Addr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ParamAndOffset)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfoAPIServer).LockerInfosByNep5Addr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.InfoAPI/LockerInfosByNep5Addr",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfoAPIServer).LockerInfosByNep5Addr(ctx, req.(*ParamAndOffset))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfoAPI_LockerInfos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Offset)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfoAPIServer).LockerInfos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.InfoAPI/LockerInfos",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfoAPIServer).LockerInfos(ctx, req.(*Offset))
	}
	return interceptor(ctx, in, info, handler)
}

var _InfoAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.InfoAPI",
	HandlerType: (*InfoAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _InfoAPI_Ping_Handler,
		},
		{
			MethodName: "LockerInfo",
			Handler:    _InfoAPI_LockerInfo_Handler,
		},
		{
			MethodName: "LockerInfosByErc20Addr",
			Handler:    _InfoAPI_LockerInfosByErc20Addr_Handler,
		},
		{
			MethodName: "LockerInfosByNep5Addr",
			Handler:    _InfoAPI_LockerInfosByNep5Addr_Handler,
		},
		{
			MethodName: "LockerInfos",
			Handler:    _InfoAPI_LockerInfos_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "types.proto",
}

// DebugAPIClient is the client API for DebugAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DebugAPIClient interface {
	HashTimer(ctx context.Context, in *String, opts ...grpc.CallOption) (*HashTimerResponse, error)
	LockerInfosCount(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*LockerInfosCountResponse, error)
	LockerInfosByState(ctx context.Context, in *ParamAndOffset, opts ...grpc.CallOption) (*LockerStatesResponse, error)
}

type debugAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewDebugAPIClient(cc grpc.ClientConnInterface) DebugAPIClient {
	return &debugAPIClient{cc}
}

func (c *debugAPIClient) HashTimer(ctx context.Context, in *String, opts ...grpc.CallOption) (*HashTimerResponse, error) {
	out := new(HashTimerResponse)
	err := c.cc.Invoke(ctx, "/proto.DebugAPI/HashTimer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *debugAPIClient) LockerInfosCount(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*LockerInfosCountResponse, error) {
	out := new(LockerInfosCountResponse)
	err := c.cc.Invoke(ctx, "/proto.DebugAPI/LockerInfosCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *debugAPIClient) LockerInfosByState(ctx context.Context, in *ParamAndOffset, opts ...grpc.CallOption) (*LockerStatesResponse, error) {
	out := new(LockerStatesResponse)
	err := c.cc.Invoke(ctx, "/proto.DebugAPI/LockerInfosByState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DebugAPIServer is the server API for DebugAPI service.
type DebugAPIServer interface {
	HashTimer(context.Context, *String) (*HashTimerResponse, error)
	LockerInfosCount(context.Context, *empty.Empty) (*LockerInfosCountResponse, error)
	LockerInfosByState(context.Context, *ParamAndOffset) (*LockerStatesResponse, error)
}

// UnimplementedDebugAPIServer can be embedded to have forward compatible implementations.
type UnimplementedDebugAPIServer struct {
}

func (*UnimplementedDebugAPIServer) HashTimer(context.Context, *String) (*HashTimerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HashTimer not implemented")
}
func (*UnimplementedDebugAPIServer) LockerInfosCount(context.Context, *empty.Empty) (*LockerInfosCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LockerInfosCount not implemented")
}
func (*UnimplementedDebugAPIServer) LockerInfosByState(context.Context, *ParamAndOffset) (*LockerStatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LockerInfosByState not implemented")
}

func RegisterDebugAPIServer(s *grpc.Server, srv DebugAPIServer) {
	s.RegisterService(&_DebugAPI_serviceDesc, srv)
}

func _DebugAPI_HashTimer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(String)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DebugAPIServer).HashTimer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DebugAPI/HashTimer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DebugAPIServer).HashTimer(ctx, req.(*String))
	}
	return interceptor(ctx, in, info, handler)
}

func _DebugAPI_LockerInfosCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DebugAPIServer).LockerInfosCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DebugAPI/LockerInfosCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DebugAPIServer).LockerInfosCount(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _DebugAPI_LockerInfosByState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ParamAndOffset)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DebugAPIServer).LockerInfosByState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DebugAPI/LockerInfosByState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DebugAPIServer).LockerInfosByState(ctx, req.(*ParamAndOffset))
	}
	return interceptor(ctx, in, info, handler)
}

var _DebugAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.DebugAPI",
	HandlerType: (*DebugAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HashTimer",
			Handler:    _DebugAPI_HashTimer_Handler,
		},
		{
			MethodName: "LockerInfosCount",
			Handler:    _DebugAPI_LockerInfosCount_Handler,
		},
		{
			MethodName: "LockerInfosByState",
			Handler:    _DebugAPI_LockerInfosByState_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "types.proto",
}
