// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.7.1
// source: types.proto

package proto

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type PackNeoTxRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Amount            int64  `protobuf:"varint,1,opt,name=amount,proto3" json:"amount,omitempty"`
	Nep5SenderAddr    string `protobuf:"bytes,2,opt,name=nep5SenderAddr,proto3" json:"nep5SenderAddr,omitempty"`
	Erc20ReceiverAddr string `protobuf:"bytes,3,opt,name=erc20ReceiverAddr,proto3" json:"erc20ReceiverAddr,omitempty"`
}

func (x *PackNeoTxRequest) Reset() {
	*x = PackNeoTxRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PackNeoTxRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PackNeoTxRequest) ProtoMessage() {}

func (x *PackNeoTxRequest) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PackNeoTxRequest.ProtoReflect.Descriptor instead.
func (*PackNeoTxRequest) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{0}
}

func (x *PackNeoTxRequest) GetAmount() int64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *PackNeoTxRequest) GetNep5SenderAddr() string {
	if x != nil {
		return x.Nep5SenderAddr
	}
	return ""
}

func (x *PackNeoTxRequest) GetErc20ReceiverAddr() string {
	if x != nil {
		return x.Erc20ReceiverAddr
	}
	return ""
}

type PackNeoTxResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TxHash       string `protobuf:"bytes,1,opt,name=txHash,proto3" json:"txHash,omitempty"`
	UnsignedData string `protobuf:"bytes,2,opt,name=unsignedData,proto3" json:"unsignedData,omitempty"`
}

func (x *PackNeoTxResponse) Reset() {
	*x = PackNeoTxResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PackNeoTxResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PackNeoTxResponse) ProtoMessage() {}

func (x *PackNeoTxResponse) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PackNeoTxResponse.ProtoReflect.Descriptor instead.
func (*PackNeoTxResponse) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{1}
}

func (x *PackNeoTxResponse) GetTxHash() string {
	if x != nil {
		return x.TxHash
	}
	return ""
}

func (x *PackNeoTxResponse) GetUnsignedData() string {
	if x != nil {
		return x.UnsignedData
	}
	return ""
}

type SendNeoTxnRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Signature      string `protobuf:"bytes,1,opt,name=signature,proto3" json:"signature,omitempty"`
	TxHash         string `protobuf:"bytes,2,opt,name=txHash,proto3" json:"txHash,omitempty"`
	PublicKey      string `protobuf:"bytes,3,opt,name=publicKey,proto3" json:"publicKey,omitempty"`
	Nep5SenderAddr string `protobuf:"bytes,4,opt,name=nep5SenderAddr,proto3" json:"nep5SenderAddr,omitempty"`
}

func (x *SendNeoTxnRequest) Reset() {
	*x = SendNeoTxnRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendNeoTxnRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendNeoTxnRequest) ProtoMessage() {}

func (x *SendNeoTxnRequest) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendNeoTxnRequest.ProtoReflect.Descriptor instead.
func (*SendNeoTxnRequest) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{2}
}

func (x *SendNeoTxnRequest) GetSignature() string {
	if x != nil {
		return x.Signature
	}
	return ""
}

func (x *SendNeoTxnRequest) GetTxHash() string {
	if x != nil {
		return x.TxHash
	}
	return ""
}

func (x *SendNeoTxnRequest) GetPublicKey() string {
	if x != nil {
		return x.PublicKey
	}
	return ""
}

func (x *SendNeoTxnRequest) GetNep5SenderAddr() string {
	if x != nil {
		return x.Nep5SenderAddr
	}
	return ""
}

type EthTransactionSentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EthTxHash string `protobuf:"bytes,1,opt,name=ethTxHash,proto3" json:"ethTxHash,omitempty"`
	NeoTxHash string `protobuf:"bytes,2,opt,name=neoTxHash,proto3" json:"neoTxHash,omitempty"`
}

func (x *EthTransactionSentRequest) Reset() {
	*x = EthTransactionSentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EthTransactionSentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EthTransactionSentRequest) ProtoMessage() {}

func (x *EthTransactionSentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EthTransactionSentRequest.ProtoReflect.Descriptor instead.
func (*EthTransactionSentRequest) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{3}
}

func (x *EthTransactionSentRequest) GetEthTxHash() string {
	if x != nil {
		return x.EthTxHash
	}
	return ""
}

func (x *EthTransactionSentRequest) GetNeoTxHash() string {
	if x != nil {
		return x.NeoTxHash
	}
	return ""
}

type PingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NeoContract string `protobuf:"bytes,1,opt,name=neoContract,proto3" json:"neoContract,omitempty"`
	NeoOwner    string `protobuf:"bytes,2,opt,name=neoOwner,proto3" json:"neoOwner,omitempty"`
	NeoUrl      string `protobuf:"bytes,3,opt,name=neoUrl,proto3" json:"neoUrl,omitempty"`
	EthContract string `protobuf:"bytes,4,opt,name=ethContract,proto3" json:"ethContract,omitempty"`
	EthOwner    string `protobuf:"bytes,5,opt,name=ethOwner,proto3" json:"ethOwner,omitempty"`
	EthUrl      string `protobuf:"bytes,6,opt,name=ethUrl,proto3" json:"ethUrl,omitempty"`
	QlcOwner    string `protobuf:"bytes,7,opt,name=qlcOwner,proto3" json:"qlcOwner,omitempty"`
	TotalSupply int64  `protobuf:"varint,8,opt,name=totalSupply,proto3" json:"totalSupply,omitempty"`
}

func (x *PingResponse) Reset() {
	*x = PingResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PingResponse) ProtoMessage() {}

func (x *PingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PingResponse.ProtoReflect.Descriptor instead.
func (*PingResponse) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{4}
}

func (x *PingResponse) GetNeoContract() string {
	if x != nil {
		return x.NeoContract
	}
	return ""
}

func (x *PingResponse) GetNeoOwner() string {
	if x != nil {
		return x.NeoOwner
	}
	return ""
}

func (x *PingResponse) GetNeoUrl() string {
	if x != nil {
		return x.NeoUrl
	}
	return ""
}

func (x *PingResponse) GetEthContract() string {
	if x != nil {
		return x.EthContract
	}
	return ""
}

func (x *PingResponse) GetEthOwner() string {
	if x != nil {
		return x.EthOwner
	}
	return ""
}

func (x *PingResponse) GetEthUrl() string {
	if x != nil {
		return x.EthUrl
	}
	return ""
}

func (x *PingResponse) GetQlcOwner() string {
	if x != nil {
		return x.QlcOwner
	}
	return ""
}

func (x *PingResponse) GetTotalSupply() int64 {
	if x != nil {
		return x.TotalSupply
	}
	return 0
}

type Offset struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page     int32 `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	PageSize int32 `protobuf:"varint,2,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
}

func (x *Offset) Reset() {
	*x = Offset{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Offset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Offset) ProtoMessage() {}

func (x *Offset) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Offset.ProtoReflect.Descriptor instead.
func (*Offset) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{5}
}

func (x *Offset) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *Offset) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type AddrAndOffset struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address  string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Page     int32  `protobuf:"varint,3,opt,name=page,proto3" json:"page,omitempty"`
	PageSize int32  `protobuf:"varint,4,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
}

func (x *AddrAndOffset) Reset() {
	*x = AddrAndOffset{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddrAndOffset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddrAndOffset) ProtoMessage() {}

func (x *AddrAndOffset) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddrAndOffset.ProtoReflect.Descriptor instead.
func (*AddrAndOffset) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{6}
}

func (x *AddrAndOffset) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *AddrAndOffset) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *AddrAndOffset) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type StateAndOffset struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State    string `protobuf:"bytes,1,opt,name=state,proto3" json:"state,omitempty"`
	Page     int32  `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
	PageSize int32  `protobuf:"varint,3,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
}

func (x *StateAndOffset) Reset() {
	*x = StateAndOffset{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StateAndOffset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StateAndOffset) ProtoMessage() {}

func (x *StateAndOffset) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StateAndOffset.ProtoReflect.Descriptor instead.
func (*StateAndOffset) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{7}
}

func (x *StateAndOffset) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *StateAndOffset) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *StateAndOffset) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type SwapInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State          int32  `protobuf:"varint,1,opt,name=state,proto3" json:"state,omitempty"`
	StateStr       string `protobuf:"bytes,2,opt,name=stateStr,proto3" json:"stateStr,omitempty"`
	Amount         int64  `protobuf:"varint,3,opt,name=amount,proto3" json:"amount,omitempty"`
	EthTxHash      string `protobuf:"bytes,4,opt,name=ethTxHash,proto3" json:"ethTxHash,omitempty"`
	NeoTxHash      string `protobuf:"bytes,5,opt,name=neoTxHash,proto3" json:"neoTxHash,omitempty"`
	EthUserAddr    string `protobuf:"bytes,6,opt,name=ethUserAddr,proto3" json:"ethUserAddr,omitempty"`
	NeoUserAddr    string `protobuf:"bytes,7,opt,name=neoUserAddr,proto3" json:"neoUserAddr,omitempty"`
	StartTime      string `protobuf:"bytes,8,opt,name=startTime,proto3" json:"startTime,omitempty"`
	LastModifyTime string `protobuf:"bytes,9,opt,name=lastModifyTime,proto3" json:"lastModifyTime,omitempty"`
}

func (x *SwapInfo) Reset() {
	*x = SwapInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SwapInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SwapInfo) ProtoMessage() {}

func (x *SwapInfo) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SwapInfo.ProtoReflect.Descriptor instead.
func (*SwapInfo) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{8}
}

func (x *SwapInfo) GetState() int32 {
	if x != nil {
		return x.State
	}
	return 0
}

func (x *SwapInfo) GetStateStr() string {
	if x != nil {
		return x.StateStr
	}
	return ""
}

func (x *SwapInfo) GetAmount() int64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *SwapInfo) GetEthTxHash() string {
	if x != nil {
		return x.EthTxHash
	}
	return ""
}

func (x *SwapInfo) GetNeoTxHash() string {
	if x != nil {
		return x.NeoTxHash
	}
	return ""
}

func (x *SwapInfo) GetEthUserAddr() string {
	if x != nil {
		return x.EthUserAddr
	}
	return ""
}

func (x *SwapInfo) GetNeoUserAddr() string {
	if x != nil {
		return x.NeoUserAddr
	}
	return ""
}

func (x *SwapInfo) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

func (x *SwapInfo) GetLastModifyTime() string {
	if x != nil {
		return x.LastModifyTime
	}
	return ""
}

type SwapInfos struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Infos []*SwapInfo `protobuf:"bytes,1,rep,name=infos,proto3" json:"infos,omitempty"`
}

func (x *SwapInfos) Reset() {
	*x = SwapInfos{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SwapInfos) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SwapInfos) ProtoMessage() {}

func (x *SwapInfos) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SwapInfos.ProtoReflect.Descriptor instead.
func (*SwapInfos) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{9}
}

func (x *SwapInfos) GetInfos() []*SwapInfo {
	if x != nil {
		return x.Infos
	}
	return nil
}

type SwapPending struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Typ            int32  `protobuf:"varint,1,opt,name=typ,proto3" json:"typ,omitempty"`
	EthTxHash      string `protobuf:"bytes,2,opt,name=ethTxHash,proto3" json:"ethTxHash,omitempty"`
	NeoTxHash      string `protobuf:"bytes,3,opt,name=neoTxHash,proto3" json:"neoTxHash,omitempty"`
	LastModifyTime string `protobuf:"bytes,4,opt,name=lastModifyTime,proto3" json:"lastModifyTime,omitempty"`
}

func (x *SwapPending) Reset() {
	*x = SwapPending{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SwapPending) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SwapPending) ProtoMessage() {}

func (x *SwapPending) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SwapPending.ProtoReflect.Descriptor instead.
func (*SwapPending) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{10}
}

func (x *SwapPending) GetTyp() int32 {
	if x != nil {
		return x.Typ
	}
	return 0
}

func (x *SwapPending) GetEthTxHash() string {
	if x != nil {
		return x.EthTxHash
	}
	return ""
}

func (x *SwapPending) GetNeoTxHash() string {
	if x != nil {
		return x.NeoTxHash
	}
	return ""
}

func (x *SwapPending) GetLastModifyTime() string {
	if x != nil {
		return x.LastModifyTime
	}
	return ""
}

type SwapPendings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Infos []*SwapPending `protobuf:"bytes,1,rep,name=infos,proto3" json:"infos,omitempty"`
}

func (x *SwapPendings) Reset() {
	*x = SwapPendings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SwapPendings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SwapPendings) ProtoMessage() {}

func (x *SwapPendings) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SwapPendings.ProtoReflect.Descriptor instead.
func (*SwapPendings) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{11}
}

func (x *SwapPendings) GetInfos() []*SwapPending {
	if x != nil {
		return x.Infos
	}
	return nil
}

type AmountByAddressResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address        string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Erc20Amount    int64  `protobuf:"varint,2,opt,name=erc20Amount,proto3" json:"erc20Amount,omitempty"`
	PledgeCount    int64  `protobuf:"varint,3,opt,name=pledgeCount,proto3" json:"pledgeCount,omitempty"`
	PledgeAmount   int64  `protobuf:"varint,4,opt,name=pledgeAmount,proto3" json:"pledgeAmount,omitempty"`
	WithdrawCount  int64  `protobuf:"varint,5,opt,name=withdrawCount,proto3" json:"withdrawCount,omitempty"`
	WithdrawAmount int64  `protobuf:"varint,6,opt,name=withdrawAmount,proto3" json:"withdrawAmount,omitempty"`
}

func (x *AmountByAddressResponse) Reset() {
	*x = AmountByAddressResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AmountByAddressResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AmountByAddressResponse) ProtoMessage() {}

func (x *AmountByAddressResponse) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AmountByAddressResponse.ProtoReflect.Descriptor instead.
func (*AmountByAddressResponse) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{12}
}

func (x *AmountByAddressResponse) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *AmountByAddressResponse) GetErc20Amount() int64 {
	if x != nil {
		return x.Erc20Amount
	}
	return 0
}

func (x *AmountByAddressResponse) GetPledgeCount() int64 {
	if x != nil {
		return x.PledgeCount
	}
	return 0
}

func (x *AmountByAddressResponse) GetPledgeAmount() int64 {
	if x != nil {
		return x.PledgeAmount
	}
	return 0
}

func (x *AmountByAddressResponse) GetWithdrawCount() int64 {
	if x != nil {
		return x.WithdrawCount
	}
	return 0
}

func (x *AmountByAddressResponse) GetWithdrawAmount() int64 {
	if x != nil {
		return x.WithdrawAmount
	}
	return 0
}

type SignDataResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sign       []byte `protobuf:"bytes,1,opt,name=sign,proto3" json:"sign,omitempty"`
	VerifyData []byte `protobuf:"bytes,2,opt,name=verifyData,proto3" json:"verifyData,omitempty"`
}

func (x *SignDataResponse) Reset() {
	*x = SignDataResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignDataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignDataResponse) ProtoMessage() {}

func (x *SignDataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignDataResponse.ProtoReflect.Descriptor instead.
func (*SignDataResponse) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{13}
}

func (x *SignDataResponse) GetSign() []byte {
	if x != nil {
		return x.Sign
	}
	return nil
}

func (x *SignDataResponse) GetVerifyData() []byte {
	if x != nil {
		return x.VerifyData
	}
	return nil
}

type Boolean struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value bool `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Boolean) Reset() {
	*x = Boolean{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Boolean) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Boolean) ProtoMessage() {}

func (x *Boolean) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Boolean.ProtoReflect.Descriptor instead.
func (*Boolean) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{14}
}

func (x *Boolean) GetValue() bool {
	if x != nil {
		return x.Value
	}
	return false
}

type String struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *String) Reset() {
	*x = String{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *String) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*String) ProtoMessage() {}

func (x *String) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use String.ProtoReflect.Descriptor instead.
func (*String) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{15}
}

func (x *String) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type Hash struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hash string `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
}

func (x *Hash) Reset() {
	*x = Hash{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Hash) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Hash) ProtoMessage() {}

func (x *Hash) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Hash.ProtoReflect.Descriptor instead.
func (*Hash) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{16}
}

func (x *Hash) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

type Address struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (x *Address) Reset() {
	*x = Address{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Address) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Address) ProtoMessage() {}

func (x *Address) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Address.ProtoReflect.Descriptor instead.
func (*Address) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{17}
}

func (x *Address) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

type Map struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count map[string]int64 `protobuf:"bytes,1,rep,name=count,proto3" json:"count,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *Map) Reset() {
	*x = Map{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Map) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Map) ProtoMessage() {}

func (x *Map) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Map.ProtoReflect.Descriptor instead.
func (*Map) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{18}
}

func (x *Map) GetCount() map[string]int64 {
	if x != nil {
		return x.Count
	}
	return nil
}

type QGasPledgeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PledgeAddress     string `protobuf:"bytes,1,opt,name=pledgeAddress,proto3" json:"pledgeAddress,omitempty"`
	Amount            int64  `protobuf:"varint,2,opt,name=amount,proto3" json:"amount,omitempty"`
	Erc20ReceiverAddr string `protobuf:"bytes,3,opt,name=erc20ReceiverAddr,proto3" json:"erc20ReceiverAddr,omitempty"`
}

func (x *QGasPledgeRequest) Reset() {
	*x = QGasPledgeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QGasPledgeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QGasPledgeRequest) ProtoMessage() {}

func (x *QGasPledgeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QGasPledgeRequest.ProtoReflect.Descriptor instead.
func (*QGasPledgeRequest) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{19}
}

func (x *QGasPledgeRequest) GetPledgeAddress() string {
	if x != nil {
		return x.PledgeAddress
	}
	return ""
}

func (x *QGasPledgeRequest) GetAmount() int64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *QGasPledgeRequest) GetErc20ReceiverAddr() string {
	if x != nil {
		return x.Erc20ReceiverAddr
	}
	return ""
}

type QGasWithdrawRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WithdrawAddress string `protobuf:"bytes,1,opt,name=withdrawAddress,proto3" json:"withdrawAddress,omitempty"`
	EthTxHash       string `protobuf:"bytes,2,opt,name=ethTxHash,proto3" json:"ethTxHash,omitempty"`
	Amount          int64  `protobuf:"varint,3,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (x *QGasWithdrawRequest) Reset() {
	*x = QGasWithdrawRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QGasWithdrawRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QGasWithdrawRequest) ProtoMessage() {}

func (x *QGasWithdrawRequest) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QGasWithdrawRequest.ProtoReflect.Descriptor instead.
func (*QGasWithdrawRequest) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{20}
}

func (x *QGasWithdrawRequest) GetWithdrawAddress() string {
	if x != nil {
		return x.WithdrawAddress
	}
	return ""
}

func (x *QGasWithdrawRequest) GetEthTxHash() string {
	if x != nil {
		return x.EthTxHash
	}
	return ""
}

func (x *QGasWithdrawRequest) GetAmount() int64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

type StateBlockHash struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hash string `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	Root string `protobuf:"bytes,2,opt,name=root,proto3" json:"root,omitempty"`
}

func (x *StateBlockHash) Reset() {
	*x = StateBlockHash{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StateBlockHash) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StateBlockHash) ProtoMessage() {}

func (x *StateBlockHash) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StateBlockHash.ProtoReflect.Descriptor instead.
func (*StateBlockHash) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{21}
}

func (x *StateBlockHash) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

func (x *StateBlockHash) GetRoot() string {
	if x != nil {
		return x.Root
	}
	return ""
}

type StateBlockSigned struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hash      string `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	Signature string `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
	Work      string `protobuf:"bytes,3,opt,name=work,proto3" json:"work,omitempty"`
}

func (x *StateBlockSigned) Reset() {
	*x = StateBlockSigned{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StateBlockSigned) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StateBlockSigned) ProtoMessage() {}

func (x *StateBlockSigned) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StateBlockSigned.ProtoReflect.Descriptor instead.
func (*StateBlockSigned) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{22}
}

func (x *StateBlockSigned) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

func (x *StateBlockSigned) GetSignature() string {
	if x != nil {
		return x.Signature
	}
	return ""
}

func (x *StateBlockSigned) GetWork() string {
	if x != nil {
		return x.Work
	}
	return ""
}

type EthTxSentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EthTxHash string `protobuf:"bytes,1,opt,name=ethTxHash,proto3" json:"ethTxHash,omitempty"`
	QlcTxHash string `protobuf:"bytes,2,opt,name=qlcTxHash,proto3" json:"qlcTxHash,omitempty"`
}

func (x *EthTxSentRequest) Reset() {
	*x = EthTxSentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EthTxSentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EthTxSentRequest) ProtoMessage() {}

func (x *EthTxSentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EthTxSentRequest.ProtoReflect.Descriptor instead.
func (*EthTxSentRequest) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{23}
}

func (x *EthTxSentRequest) GetEthTxHash() string {
	if x != nil {
		return x.EthTxHash
	}
	return ""
}

func (x *EthTxSentRequest) GetQlcTxHash() string {
	if x != nil {
		return x.QlcTxHash
	}
	return ""
}

type QGasSwapInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State          int32  `protobuf:"varint,1,opt,name=state,proto3" json:"state,omitempty"`
	StateStr       string `protobuf:"bytes,2,opt,name=stateStr,proto3" json:"stateStr,omitempty"`
	Amount         int64  `protobuf:"varint,3,opt,name=amount,proto3" json:"amount,omitempty"`
	QlcUserAddr    string `protobuf:"bytes,4,opt,name=qlcUserAddr,proto3" json:"qlcUserAddr,omitempty"`
	SendTxHash     string `protobuf:"bytes,5,opt,name=sendTxHash,proto3" json:"sendTxHash,omitempty"`
	RewardTxHash   string `protobuf:"bytes,6,opt,name=rewardTxHash,proto3" json:"rewardTxHash,omitempty"`
	EthUserAddr    string `protobuf:"bytes,7,opt,name=ethUserAddr,proto3" json:"ethUserAddr,omitempty"`
	EthTxHash      string `protobuf:"bytes,8,opt,name=ethTxHash,proto3" json:"ethTxHash,omitempty"`
	StartTime      string `protobuf:"bytes,9,opt,name=startTime,proto3" json:"startTime,omitempty"`
	LastModifyTime string `protobuf:"bytes,10,opt,name=lastModifyTime,proto3" json:"lastModifyTime,omitempty"`
}

func (x *QGasSwapInfo) Reset() {
	*x = QGasSwapInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QGasSwapInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QGasSwapInfo) ProtoMessage() {}

func (x *QGasSwapInfo) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QGasSwapInfo.ProtoReflect.Descriptor instead.
func (*QGasSwapInfo) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{24}
}

func (x *QGasSwapInfo) GetState() int32 {
	if x != nil {
		return x.State
	}
	return 0
}

func (x *QGasSwapInfo) GetStateStr() string {
	if x != nil {
		return x.StateStr
	}
	return ""
}

func (x *QGasSwapInfo) GetAmount() int64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *QGasSwapInfo) GetQlcUserAddr() string {
	if x != nil {
		return x.QlcUserAddr
	}
	return ""
}

func (x *QGasSwapInfo) GetSendTxHash() string {
	if x != nil {
		return x.SendTxHash
	}
	return ""
}

func (x *QGasSwapInfo) GetRewardTxHash() string {
	if x != nil {
		return x.RewardTxHash
	}
	return ""
}

func (x *QGasSwapInfo) GetEthUserAddr() string {
	if x != nil {
		return x.EthUserAddr
	}
	return ""
}

func (x *QGasSwapInfo) GetEthTxHash() string {
	if x != nil {
		return x.EthTxHash
	}
	return ""
}

func (x *QGasSwapInfo) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

func (x *QGasSwapInfo) GetLastModifyTime() string {
	if x != nil {
		return x.LastModifyTime
	}
	return ""
}

type QGasSwapInfos struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Infos []*QGasSwapInfo `protobuf:"bytes,1,rep,name=infos,proto3" json:"infos,omitempty"`
}

func (x *QGasSwapInfos) Reset() {
	*x = QGasSwapInfos{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QGasSwapInfos) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QGasSwapInfos) ProtoMessage() {}

func (x *QGasSwapInfos) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QGasSwapInfos.ProtoReflect.Descriptor instead.
func (*QGasSwapInfos) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{25}
}

func (x *QGasSwapInfos) GetInfos() []*QGasSwapInfo {
	if x != nil {
		return x.Infos
	}
	return nil
}

var File_types_proto protoreflect.FileDescriptor

var file_types_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0x80, 0x01, 0x0a, 0x10, 0x50, 0x61, 0x63, 0x6b, 0x4e, 0x65, 0x6f, 0x54, 0x78, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0e,
	0x6e, 0x65, 0x70, 0x35, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6e, 0x65, 0x70, 0x35, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72,
	0x41, 0x64, 0x64, 0x72, 0x12, 0x2c, 0x0a, 0x11, 0x65, 0x72, 0x63, 0x32, 0x30, 0x52, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x11, 0x65, 0x72, 0x63, 0x32, 0x30, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x41, 0x64,
	0x64, 0x72, 0x22, 0x4f, 0x0a, 0x11, 0x50, 0x61, 0x63, 0x6b, 0x4e, 0x65, 0x6f, 0x54, 0x78, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x78, 0x48, 0x61, 0x73,
	0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x78, 0x48, 0x61, 0x73, 0x68, 0x12,
	0x22, 0x0a, 0x0c, 0x75, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x75, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x44,
	0x61, 0x74, 0x61, 0x22, 0x8f, 0x01, 0x0a, 0x11, 0x53, 0x65, 0x6e, 0x64, 0x4e, 0x65, 0x6f, 0x54,
	0x78, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x78, 0x48, 0x61, 0x73,
	0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x78, 0x48, 0x61, 0x73, 0x68, 0x12,
	0x1c, 0x0a, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x12, 0x26, 0x0a,
	0x0e, 0x6e, 0x65, 0x70, 0x35, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6e, 0x65, 0x70, 0x35, 0x53, 0x65, 0x6e, 0x64, 0x65,
	0x72, 0x41, 0x64, 0x64, 0x72, 0x22, 0x57, 0x0a, 0x19, 0x45, 0x74, 0x68, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x74, 0x68, 0x54, 0x78, 0x48, 0x61, 0x73, 0x68, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x74, 0x68, 0x54, 0x78, 0x48, 0x61, 0x73, 0x68,
	0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x65, 0x6f, 0x54, 0x78, 0x48, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x65, 0x6f, 0x54, 0x78, 0x48, 0x61, 0x73, 0x68, 0x22, 0xf8,
	0x01, 0x0a, 0x0c, 0x50, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x6e, 0x65, 0x6f, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6e, 0x65, 0x6f, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x65, 0x6f, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x65, 0x6f, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x16, 0x0a,
	0x06, 0x6e, 0x65, 0x6f, 0x55, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e,
	0x65, 0x6f, 0x55, 0x72, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x65, 0x74, 0x68, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x65, 0x74, 0x68, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x74, 0x68, 0x4f, 0x77,
	0x6e, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x74, 0x68, 0x4f, 0x77,
	0x6e, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x74, 0x68, 0x55, 0x72, 0x6c, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x74, 0x68, 0x55, 0x72, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x71,
	0x6c, 0x63, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x71,
	0x6c, 0x63, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x22, 0x38, 0x0a, 0x06, 0x4f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53,
	0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53,
	0x69, 0x7a, 0x65, 0x22, 0x59, 0x0a, 0x0d, 0x41, 0x64, 0x64, 0x72, 0x41, 0x6e, 0x64, 0x4f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x12,
	0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x61,
	0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x56,
	0x0a, 0x0e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x41, 0x6e, 0x64, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61,
	0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61,
	0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x9a, 0x02, 0x0a, 0x08, 0x53, 0x77, 0x61, 0x70, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x53, 0x74, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x53, 0x74, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a,
	0x09, 0x65, 0x74, 0x68, 0x54, 0x78, 0x48, 0x61, 0x73, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x65, 0x74, 0x68, 0x54, 0x78, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1c, 0x0a, 0x09, 0x6e,
	0x65, 0x6f, 0x54, 0x78, 0x48, 0x61, 0x73, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x6e, 0x65, 0x6f, 0x54, 0x78, 0x48, 0x61, 0x73, 0x68, 0x12, 0x20, 0x0a, 0x0b, 0x65, 0x74, 0x68,
	0x55, 0x73, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x65, 0x74, 0x68, 0x55, 0x73, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x6e,
	0x65, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x6e, 0x65, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x12, 0x1c, 0x0a,
	0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x6c,
	0x61, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x54,
	0x69, 0x6d, 0x65, 0x22, 0x32, 0x0a, 0x09, 0x53, 0x77, 0x61, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x73,
	0x12, 0x25, 0x0a, 0x05, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x77, 0x61, 0x70, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x05, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x22, 0x83, 0x01, 0x0a, 0x0b, 0x53, 0x77, 0x61, 0x70,
	0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x79, 0x70, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x74, 0x79, 0x70, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x74, 0x68,
	0x54, 0x78, 0x48, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x74,
	0x68, 0x54, 0x78, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x65, 0x6f, 0x54, 0x78,
	0x48, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x65, 0x6f, 0x54,
	0x78, 0x48, 0x61, 0x73, 0x68, 0x12, 0x26, 0x0a, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x4d, 0x6f, 0x64,
	0x69, 0x66, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6c,
	0x61, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x38, 0x0a,
	0x0c, 0x53, 0x77, 0x61, 0x70, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x28, 0x0a,
	0x05, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x77, 0x61, 0x70, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x52, 0x05, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x22, 0xe9, 0x01, 0x0a, 0x17, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x42, 0x79, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x20, 0x0a,
	0x0b, 0x65, 0x72, 0x63, 0x32, 0x30, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0b, 0x65, 0x72, 0x63, 0x32, 0x30, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x20, 0x0a, 0x0b, 0x70, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x70, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x70, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61,
	0x77, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x77, 0x69,
	0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x77,
	0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0e, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x22, 0x46, 0x0a, 0x10, 0x53, 0x69, 0x67, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x67, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x73, 0x69, 0x67, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x76,
	0x65, 0x72, 0x69, 0x66, 0x79, 0x44, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x0a, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x44, 0x61, 0x74, 0x61, 0x22, 0x1f, 0x0a, 0x07, 0x42,
	0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x1e, 0x0a, 0x06,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x1a, 0x0a, 0x04,
	0x48, 0x61, 0x73, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x22, 0x23, 0x0a, 0x07, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x6c, 0x0a,
	0x03, 0x4d, 0x61, 0x70, 0x12, 0x2b, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x61, 0x70, 0x2e,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x1a, 0x38, 0x0a, 0x0a, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x7f, 0x0a, 0x11, 0x51,
	0x47, 0x61, 0x73, 0x50, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x24, 0x0a, 0x0d, 0x70, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2c,
	0x0a, 0x11, 0x65, 0x72, 0x63, 0x32, 0x30, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x41,
	0x64, 0x64, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x65, 0x72, 0x63, 0x32, 0x30,
	0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x22, 0x75, 0x0a, 0x13,
	0x51, 0x47, 0x61, 0x73, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x77, 0x69,
	0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1c, 0x0a,
	0x09, 0x65, 0x74, 0x68, 0x54, 0x78, 0x48, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x65, 0x74, 0x68, 0x54, 0x78, 0x48, 0x61, 0x73, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x22, 0x38, 0x0a, 0x0e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x48, 0x61, 0x73, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x6f, 0x6f,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x6f, 0x6f, 0x74, 0x22, 0x58, 0x0a,
	0x10, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x69, 0x67, 0x6e, 0x65,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x68, 0x61, 0x73, 0x68, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x77, 0x6f, 0x72, 0x6b, 0x22, 0x4e, 0x0a, 0x10, 0x45, 0x74, 0x68, 0x54, 0x78,
	0x53, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x65,
	0x74, 0x68, 0x54, 0x78, 0x48, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x65, 0x74, 0x68, 0x54, 0x78, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1c, 0x0a, 0x09, 0x71, 0x6c, 0x63,
	0x54, 0x78, 0x48, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x71, 0x6c,
	0x63, 0x54, 0x78, 0x48, 0x61, 0x73, 0x68, 0x22, 0xc4, 0x02, 0x0a, 0x0c, 0x51, 0x47, 0x61, 0x73,
	0x53, 0x77, 0x61, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x73, 0x74, 0x61, 0x74, 0x65, 0x53, 0x74, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x73, 0x74, 0x61, 0x74, 0x65, 0x53, 0x74, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x71, 0x6c, 0x63, 0x55, 0x73, 0x65, 0x72, 0x41, 0x64, 0x64,
	0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x71, 0x6c, 0x63, 0x55, 0x73, 0x65, 0x72,
	0x41, 0x64, 0x64, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x65, 0x6e, 0x64, 0x54, 0x78, 0x48, 0x61,
	0x73, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x65, 0x6e, 0x64, 0x54, 0x78,
	0x48, 0x61, 0x73, 0x68, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x54, 0x78,
	0x48, 0x61, 0x73, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x54, 0x78, 0x48, 0x61, 0x73, 0x68, 0x12, 0x20, 0x0a, 0x0b, 0x65, 0x74, 0x68, 0x55,
	0x73, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x65,
	0x74, 0x68, 0x55, 0x73, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x74,
	0x68, 0x54, 0x78, 0x48, 0x61, 0x73, 0x68, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65,
	0x74, 0x68, 0x54, 0x78, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x4d, 0x6f,
	0x64, 0x69, 0x66, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x6c, 0x61, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x3a,
	0x0a, 0x0d, 0x51, 0x47, 0x61, 0x73, 0x53, 0x77, 0x61, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x12,
	0x29, 0x0a, 0x05, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x51, 0x47, 0x61, 0x73, 0x53, 0x77, 0x61, 0x70, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x05, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x32, 0x87, 0x06, 0x0a, 0x0a, 0x44,
	0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x41, 0x50, 0x49, 0x12, 0x6f, 0x0a, 0x12, 0x50, 0x61, 0x63,
	0x6b, 0x4e, 0x65, 0x6f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x4e, 0x65, 0x6f, 0x54,
	0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x50, 0x61, 0x63, 0x6b, 0x4e, 0x65, 0x6f, 0x54, 0x78, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x26, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20, 0x22, 0x1b, 0x2f, 0x64, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x2f, 0x70, 0x61, 0x63, 0x6b, 0x4e, 0x65, 0x6f, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x01, 0x2a, 0x12, 0x66, 0x0a, 0x12, 0x53, 0x65,
	0x6e, 0x64, 0x4e, 0x65, 0x6f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x4e, 0x65, 0x6f,
	0x54, 0x78, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x22, 0x26, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x20, 0x22, 0x1b, 0x2f, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x2f, 0x73, 0x65, 0x6e,
	0x64, 0x4e, 0x65, 0x6f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x3a,
	0x01, 0x2a, 0x12, 0x63, 0x0a, 0x17, 0x4e, 0x65, 0x6f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65, 0x64, 0x12, 0x0b, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x48, 0x61, 0x73, 0x68, 0x1a, 0x0e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x22, 0x2b, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x25, 0x22, 0x20, 0x2f, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x2f, 0x6e, 0x65, 0x6f,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x72, 0x6d, 0x65, 0x64, 0x3a, 0x01, 0x2a, 0x12, 0x52, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x45, 0x74,
	0x68, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x12, 0x0b, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x48, 0x61, 0x73, 0x68, 0x1a, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x22, 0x23, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x22, 0x18,
	0x2f, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x2f, 0x67, 0x65, 0x74, 0x45, 0x74, 0x68, 0x4f,
	0x77, 0x6e, 0x65, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x3a, 0x01, 0x2a, 0x12, 0x63, 0x0a, 0x17, 0x45,
	0x74, 0x68, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x72, 0x6d, 0x65, 0x64, 0x12, 0x0b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x48,
	0x61, 0x73, 0x68, 0x1a, 0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c,
	0x65, 0x61, 0x6e, 0x22, 0x2b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x25, 0x22, 0x20, 0x2f, 0x64, 0x65,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x2f, 0x65, 0x74, 0x68, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65, 0x64, 0x3a, 0x01, 0x2a,
	0x12, 0x6e, 0x0a, 0x12, 0x45, 0x74, 0x68, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x65, 0x6e, 0x74, 0x12, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45,
	0x74, 0x68, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x22, 0x26, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20,
	0x22, 0x1b, 0x2f, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x2f, 0x65, 0x74, 0x68, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x6e, 0x74, 0x3a, 0x01, 0x2a,
	0x12, 0x4f, 0x0a, 0x10, 0x45, 0x74, 0x68, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x44, 0x12, 0x0b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x48, 0x61, 0x73,
	0x68, 0x1a, 0x0b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x48, 0x61, 0x73, 0x68, 0x22, 0x21,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x12, 0x19, 0x2f, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x2f, 0x65, 0x74, 0x68, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x44, 0x12, 0x41, 0x0a, 0x06, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x12, 0x0b, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x48, 0x61, 0x73, 0x68, 0x1a, 0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x22, 0x1a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x14,
	0x22, 0x0f, 0x2f, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x2f, 0x72, 0x65, 0x66, 0x75, 0x6e,
	0x64, 0x3a, 0x01, 0x2a, 0x32, 0xcf, 0x01, 0x0a, 0x0b, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61,
	0x77, 0x41, 0x50, 0x49, 0x12, 0x64, 0x0a, 0x17, 0x45, 0x74, 0x68, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65, 0x64, 0x12,
	0x0b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x48, 0x61, 0x73, 0x68, 0x1a, 0x0e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x22, 0x2c, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x26, 0x22, 0x21, 0x2f, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x2f,
	0x65, 0x74, 0x68, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65, 0x64, 0x3a, 0x01, 0x2a, 0x12, 0x5a, 0x0a, 0x12, 0x45, 0x74,
	0x68, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x6e, 0x74,
	0x12, 0x0b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x48, 0x61, 0x73, 0x68, 0x1a, 0x0e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x22, 0x27, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x21, 0x22, 0x1c, 0x2f, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77,
	0x2f, 0x65, 0x74, 0x68, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x65, 0x6e, 0x74, 0x3a, 0x01, 0x2a, 0x32, 0xd9, 0x07, 0x0a, 0x07, 0x49, 0x6e, 0x66, 0x6f, 0x41,
	0x50, 0x49, 0x12, 0x47, 0x0a, 0x04, 0x50, 0x69, 0x6e, 0x67, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x1a, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x69, 0x6e, 0x67, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x12, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0c, 0x12,
	0x0a, 0x2f, 0x69, 0x6e, 0x66, 0x6f, 0x2f, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x55, 0x0a, 0x13, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x45, 0x74, 0x68, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x0b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x48, 0x61, 0x73, 0x68, 0x1a,
	0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x22,
	0x21, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x12, 0x19, 0x2f, 0x69, 0x6e, 0x66, 0x6f, 0x2f, 0x63,
	0x68, 0x65, 0x63, 0x6b, 0x45, 0x74, 0x68, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x55, 0x0a, 0x13, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x4e, 0x65, 0x6f, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0b, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x48, 0x61, 0x73, 0x68, 0x1a, 0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42,
	0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x22, 0x21, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x12, 0x19,
	0x2f, 0x69, 0x6e, 0x66, 0x6f, 0x2f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x4e, 0x65, 0x6f, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4b, 0x0a, 0x0c, 0x53, 0x77, 0x61,
	0x70, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x1a, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x53, 0x77, 0x61, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x22, 0x1a, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x14, 0x12, 0x12, 0x2f, 0x69, 0x6e, 0x66, 0x6f, 0x2f, 0x73, 0x77, 0x61, 0x70, 0x49, 0x6e,
	0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x5e, 0x0a, 0x12, 0x53, 0x77, 0x61, 0x70, 0x49, 0x6e,
	0x66, 0x6f, 0x73, 0x42, 0x79, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x14, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x41, 0x6e, 0x64, 0x4f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x1a, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x77, 0x61, 0x70, 0x49,
	0x6e, 0x66, 0x6f, 0x73, 0x22, 0x20, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1a, 0x12, 0x18, 0x2f, 0x69,
	0x6e, 0x66, 0x6f, 0x2f, 0x73, 0x77, 0x61, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x42, 0x79, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x50, 0x0a, 0x10, 0x53, 0x77, 0x61, 0x70, 0x49, 0x6e,
	0x66, 0x6f, 0x42, 0x79, 0x54, 0x78, 0x48, 0x61, 0x73, 0x68, 0x12, 0x0b, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x48, 0x61, 0x73, 0x68, 0x1a, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x53, 0x77, 0x61, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x1e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18,
	0x12, 0x16, 0x2f, 0x69, 0x6e, 0x66, 0x6f, 0x2f, 0x73, 0x77, 0x61, 0x70, 0x49, 0x6e, 0x66, 0x6f,
	0x42, 0x79, 0x54, 0x78, 0x48, 0x61, 0x73, 0x68, 0x12, 0x5b, 0x0a, 0x10, 0x53, 0x77, 0x61, 0x70,
	0x49, 0x6e, 0x66, 0x6f, 0x73, 0x42, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x15, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x41, 0x6e, 0x64, 0x4f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x1a, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x77, 0x61, 0x70,
	0x49, 0x6e, 0x66, 0x6f, 0x73, 0x22, 0x1e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18, 0x12, 0x16, 0x2f,
	0x69, 0x6e, 0x66, 0x6f, 0x2f, 0x73, 0x77, 0x61, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x42, 0x79,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x56, 0x0a, 0x10, 0x53, 0x77, 0x61, 0x70, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x42, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x1a, 0x0a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x61, 0x70, 0x22, 0x1e, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x18, 0x12, 0x16, 0x2f, 0x69, 0x6e, 0x66, 0x6f, 0x2f, 0x73, 0x77, 0x61,
	0x70, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x58, 0x0a,
	0x11, 0x53, 0x77, 0x61, 0x70, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x79, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x0a, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x4d, 0x61, 0x70, 0x22, 0x1f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19, 0x12, 0x17,
	0x2f, 0x69, 0x6e, 0x66, 0x6f, 0x2f, 0x73, 0x77, 0x61, 0x70, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x42, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x68, 0x0a, 0x13, 0x53, 0x77, 0x61, 0x70, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x79, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x0e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x1a, 0x1e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x79, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x21,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x12, 0x19, 0x2f, 0x69, 0x6e, 0x66, 0x6f, 0x2f, 0x73, 0x77,
	0x61, 0x70, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x79, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x5f, 0x0a, 0x10, 0x53, 0x77, 0x61, 0x70, 0x55, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x72, 0x6d, 0x65, 0x64, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x13, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x77, 0x61, 0x70, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e,
	0x67, 0x73, 0x22, 0x1e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18, 0x12, 0x16, 0x2f, 0x69, 0x6e, 0x66,
	0x6f, 0x2f, 0x73, 0x77, 0x61, 0x70, 0x55, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65,
	0x64, 0x73, 0x32, 0x57, 0x0a, 0x08, 0x44, 0x65, 0x62, 0x75, 0x67, 0x41, 0x50, 0x49, 0x12, 0x4b,
	0x0a, 0x08, 0x53, 0x69, 0x67, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x0d, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x1a, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x17, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x11, 0x12, 0x0f, 0x2f, 0x64, 0x65, 0x62,
	0x75, 0x67, 0x2f, 0x73, 0x69, 0x67, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x32, 0xec, 0x08, 0x0a, 0x0b,
	0x51, 0x47, 0x61, 0x73, 0x53, 0x77, 0x61, 0x70, 0x41, 0x50, 0x49, 0x12, 0x66, 0x0a, 0x0e, 0x47,
	0x65, 0x74, 0x50, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x18, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x51, 0x47, 0x61, 0x73, 0x50, 0x6c, 0x65, 0x64, 0x67, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x22, 0x23,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x22, 0x18, 0x2f, 0x71, 0x67, 0x61, 0x73, 0x73, 0x77, 0x61,
	0x70, 0x2f, 0x67, 0x65, 0x74, 0x50, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x3a, 0x01, 0x2a, 0x12, 0x60, 0x0a, 0x0f, 0x50, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x45, 0x74, 0x68,
	0x54, 0x78, 0x53, 0x65, 0x6e, 0x74, 0x12, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45,
	0x74, 0x68, 0x54, 0x78, 0x53, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x22,
	0x24, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x22, 0x19, 0x2f, 0x71, 0x67, 0x61, 0x73, 0x73, 0x77,
	0x61, 0x70, 0x2f, 0x70, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x45, 0x74, 0x68, 0x54, 0x78, 0x53, 0x65,
	0x6e, 0x74, 0x3a, 0x01, 0x2a, 0x12, 0x5d, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x57, 0x69, 0x74, 0x68,
	0x64, 0x72, 0x61, 0x77, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x0b, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x48, 0x61, 0x73, 0x68, 0x1a, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x22, 0x25, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x1f, 0x22, 0x1a, 0x2f, 0x71, 0x67, 0x61, 0x73, 0x73, 0x77, 0x61, 0x70,
	0x2f, 0x67, 0x65, 0x74, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x3a, 0x01, 0x2a, 0x12, 0x53, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x45, 0x74, 0x68, 0x4f, 0x77,
	0x6e, 0x65, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x12, 0x0b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x48, 0x61, 0x73, 0x68, 0x1a, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x22, 0x24, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x22, 0x19, 0x2f, 0x71, 0x67,
	0x61, 0x73, 0x73, 0x77, 0x61, 0x70, 0x2f, 0x67, 0x65, 0x74, 0x45, 0x74, 0x68, 0x4f, 0x77, 0x6e,
	0x65, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x3a, 0x01, 0x2a, 0x12, 0x58, 0x0a, 0x11, 0x57, 0x69, 0x74,
	0x68, 0x64, 0x72, 0x61, 0x77, 0x45, 0x74, 0x68, 0x54, 0x78, 0x53, 0x65, 0x6e, 0x74, 0x12, 0x0b,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x48, 0x61, 0x73, 0x68, 0x1a, 0x0e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x22, 0x26, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x20, 0x22, 0x1b, 0x2f, 0x71, 0x67, 0x61, 0x73, 0x73, 0x77, 0x61, 0x70, 0x2f, 0x77,
	0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x45, 0x74, 0x68, 0x54, 0x78, 0x53, 0x65, 0x6e, 0x74,
	0x3a, 0x01, 0x2a, 0x12, 0x57, 0x0a, 0x0c, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x12, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x1a, 0x0b, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x48, 0x61, 0x73, 0x68, 0x22, 0x21, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x1b, 0x22, 0x16, 0x2f, 0x71, 0x67, 0x61, 0x73, 0x73, 0x77, 0x61, 0x70, 0x2f, 0x70, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x3a, 0x01, 0x2a, 0x12, 0x53, 0x0a, 0x0c,
	0x53, 0x77, 0x61, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x0d, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x1a, 0x14, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x51, 0x47, 0x61, 0x73, 0x53, 0x77, 0x61, 0x70, 0x49, 0x6e, 0x66, 0x6f,
	0x73, 0x22, 0x1e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18, 0x12, 0x16, 0x2f, 0x71, 0x67, 0x61, 0x73,
	0x73, 0x77, 0x61, 0x70, 0x2f, 0x73, 0x77, 0x61, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x66, 0x0a, 0x12, 0x53, 0x77, 0x61, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x42, 0x79,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x41, 0x64, 0x64, 0x72, 0x41, 0x6e, 0x64, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x1a, 0x14, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x51, 0x47, 0x61, 0x73, 0x53, 0x77, 0x61, 0x70, 0x49, 0x6e,
	0x66, 0x6f, 0x73, 0x22, 0x24, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x12, 0x1c, 0x2f, 0x71, 0x67,
	0x61, 0x73, 0x73, 0x77, 0x61, 0x70, 0x2f, 0x73, 0x77, 0x61, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x73,
	0x42, 0x79, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x58, 0x0a, 0x10, 0x53, 0x77, 0x61,
	0x70, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x79, 0x54, 0x78, 0x48, 0x61, 0x73, 0x68, 0x12, 0x0b, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x48, 0x61, 0x73, 0x68, 0x1a, 0x13, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x51, 0x47, 0x61, 0x73, 0x53, 0x77, 0x61, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x22,
	0x22, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x12, 0x1a, 0x2f, 0x71, 0x67, 0x61, 0x73, 0x73, 0x77,
	0x61, 0x70, 0x2f, 0x73, 0x77, 0x61, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x79, 0x54, 0x78, 0x48,
	0x61, 0x73, 0x68, 0x12, 0x63, 0x0a, 0x10, 0x53, 0x77, 0x61, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x73,
	0x42, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x41, 0x6e, 0x64, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x1a, 0x14,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x51, 0x47, 0x61, 0x73, 0x53, 0x77, 0x61, 0x70, 0x49,
	0x6e, 0x66, 0x6f, 0x73, 0x22, 0x22, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x12, 0x1a, 0x2f, 0x71,
	0x67, 0x61, 0x73, 0x73, 0x77, 0x61, 0x70, 0x2f, 0x73, 0x77, 0x61, 0x70, 0x49, 0x6e, 0x66, 0x6f,
	0x73, 0x42, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x56, 0x0a, 0x0e, 0x53, 0x77, 0x61, 0x70,
	0x49, 0x6e, 0x66, 0x6f, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x1a, 0x0a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x61, 0x70, 0x22, 0x20,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1a, 0x12, 0x18, 0x2f, 0x71, 0x67, 0x61, 0x73, 0x73, 0x77, 0x61,
	0x70, 0x2f, 0x73, 0x77, 0x61, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x58, 0x0a, 0x0f, 0x53, 0x77, 0x61, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x0a, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x61, 0x70, 0x22, 0x21, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x12,
	0x19, 0x2f, 0x71, 0x67, 0x61, 0x73, 0x73, 0x77, 0x61, 0x70, 0x2f, 0x73, 0x77, 0x61, 0x70, 0x49,
	0x6e, 0x66, 0x6f, 0x73, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x09, 0x5a, 0x07, 0x2e, 0x3b,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_types_proto_rawDescOnce sync.Once
	file_types_proto_rawDescData = file_types_proto_rawDesc
)

func file_types_proto_rawDescGZIP() []byte {
	file_types_proto_rawDescOnce.Do(func() {
		file_types_proto_rawDescData = protoimpl.X.CompressGZIP(file_types_proto_rawDescData)
	})
	return file_types_proto_rawDescData
}

var file_types_proto_msgTypes = make([]protoimpl.MessageInfo, 27)
var file_types_proto_goTypes = []interface{}{
	(*PackNeoTxRequest)(nil),          // 0: proto.PackNeoTxRequest
	(*PackNeoTxResponse)(nil),         // 1: proto.PackNeoTxResponse
	(*SendNeoTxnRequest)(nil),         // 2: proto.SendNeoTxnRequest
	(*EthTransactionSentRequest)(nil), // 3: proto.EthTransactionSentRequest
	(*PingResponse)(nil),              // 4: proto.PingResponse
	(*Offset)(nil),                    // 5: proto.Offset
	(*AddrAndOffset)(nil),             // 6: proto.AddrAndOffset
	(*StateAndOffset)(nil),            // 7: proto.StateAndOffset
	(*SwapInfo)(nil),                  // 8: proto.SwapInfo
	(*SwapInfos)(nil),                 // 9: proto.SwapInfos
	(*SwapPending)(nil),               // 10: proto.SwapPending
	(*SwapPendings)(nil),              // 11: proto.SwapPendings
	(*AmountByAddressResponse)(nil),   // 12: proto.AmountByAddressResponse
	(*SignDataResponse)(nil),          // 13: proto.SignDataResponse
	(*Boolean)(nil),                   // 14: proto.Boolean
	(*String)(nil),                    // 15: proto.String
	(*Hash)(nil),                      // 16: proto.Hash
	(*Address)(nil),                   // 17: proto.Address
	(*Map)(nil),                       // 18: proto.Map
	(*QGasPledgeRequest)(nil),         // 19: proto.QGasPledgeRequest
	(*QGasWithdrawRequest)(nil),       // 20: proto.QGasWithdrawRequest
	(*StateBlockHash)(nil),            // 21: proto.StateBlockHash
	(*StateBlockSigned)(nil),          // 22: proto.StateBlockSigned
	(*EthTxSentRequest)(nil),          // 23: proto.EthTxSentRequest
	(*QGasSwapInfo)(nil),              // 24: proto.QGasSwapInfo
	(*QGasSwapInfos)(nil),             // 25: proto.QGasSwapInfos
	nil,                               // 26: proto.Map.CountEntry
	(*empty.Empty)(nil),               // 27: google.protobuf.Empty
}
var file_types_proto_depIdxs = []int32{
	8,  // 0: proto.SwapInfos.infos:type_name -> proto.SwapInfo
	10, // 1: proto.SwapPendings.infos:type_name -> proto.SwapPending
	26, // 2: proto.Map.count:type_name -> proto.Map.CountEntry
	24, // 3: proto.QGasSwapInfos.infos:type_name -> proto.QGasSwapInfo
	0,  // 4: proto.DepositAPI.PackNeoTransaction:input_type -> proto.PackNeoTxRequest
	2,  // 5: proto.DepositAPI.SendNeoTransaction:input_type -> proto.SendNeoTxnRequest
	16, // 6: proto.DepositAPI.NeoTransactionConfirmed:input_type -> proto.Hash
	16, // 7: proto.DepositAPI.GetEthOwnerSign:input_type -> proto.Hash
	16, // 8: proto.DepositAPI.EthTransactionConfirmed:input_type -> proto.Hash
	3,  // 9: proto.DepositAPI.EthTransactionSent:input_type -> proto.EthTransactionSentRequest
	16, // 10: proto.DepositAPI.EthTransactionID:input_type -> proto.Hash
	16, // 11: proto.DepositAPI.Refund:input_type -> proto.Hash
	16, // 12: proto.WithdrawAPI.EthTransactionConfirmed:input_type -> proto.Hash
	16, // 13: proto.WithdrawAPI.EthTransactionSent:input_type -> proto.Hash
	27, // 14: proto.InfoAPI.Ping:input_type -> google.protobuf.Empty
	16, // 15: proto.InfoAPI.CheckEthTransaction:input_type -> proto.Hash
	16, // 16: proto.InfoAPI.CheckNeoTransaction:input_type -> proto.Hash
	5,  // 17: proto.InfoAPI.SwapInfoList:input_type -> proto.Offset
	6,  // 18: proto.InfoAPI.SwapInfosByAddress:input_type -> proto.AddrAndOffset
	16, // 19: proto.InfoAPI.SwapInfoByTxHash:input_type -> proto.Hash
	7,  // 20: proto.InfoAPI.SwapInfosByState:input_type -> proto.StateAndOffset
	27, // 21: proto.InfoAPI.SwapCountByState:input_type -> google.protobuf.Empty
	27, // 22: proto.InfoAPI.SwapAmountByState:input_type -> google.protobuf.Empty
	17, // 23: proto.InfoAPI.SwapAmountByAddress:input_type -> proto.Address
	27, // 24: proto.InfoAPI.SwapUnconfirmeds:input_type -> google.protobuf.Empty
	15, // 25: proto.DebugAPI.SignData:input_type -> proto.String
	19, // 26: proto.QGasSwapAPI.GetPledgeBlock:input_type -> proto.QGasPledgeRequest
	23, // 27: proto.QGasSwapAPI.PledgeEthTxSent:input_type -> proto.EthTxSentRequest
	16, // 28: proto.QGasSwapAPI.GetWithdrawBlock:input_type -> proto.Hash
	16, // 29: proto.QGasSwapAPI.GetEthOwnerSign:input_type -> proto.Hash
	16, // 30: proto.QGasSwapAPI.WithdrawEthTxSent:input_type -> proto.Hash
	22, // 31: proto.QGasSwapAPI.ProcessBlock:input_type -> proto.StateBlockSigned
	5,  // 32: proto.QGasSwapAPI.SwapInfoList:input_type -> proto.Offset
	6,  // 33: proto.QGasSwapAPI.SwapInfosByAddress:input_type -> proto.AddrAndOffset
	16, // 34: proto.QGasSwapAPI.SwapInfoByTxHash:input_type -> proto.Hash
	7,  // 35: proto.QGasSwapAPI.SwapInfosByState:input_type -> proto.StateAndOffset
	27, // 36: proto.QGasSwapAPI.SwapInfosCount:input_type -> google.protobuf.Empty
	27, // 37: proto.QGasSwapAPI.SwapInfosAmount:input_type -> google.protobuf.Empty
	1,  // 38: proto.DepositAPI.PackNeoTransaction:output_type -> proto.PackNeoTxResponse
	14, // 39: proto.DepositAPI.SendNeoTransaction:output_type -> proto.Boolean
	14, // 40: proto.DepositAPI.NeoTransactionConfirmed:output_type -> proto.Boolean
	15, // 41: proto.DepositAPI.GetEthOwnerSign:output_type -> proto.String
	14, // 42: proto.DepositAPI.EthTransactionConfirmed:output_type -> proto.Boolean
	14, // 43: proto.DepositAPI.EthTransactionSent:output_type -> proto.Boolean
	16, // 44: proto.DepositAPI.EthTransactionID:output_type -> proto.Hash
	14, // 45: proto.DepositAPI.Refund:output_type -> proto.Boolean
	14, // 46: proto.WithdrawAPI.EthTransactionConfirmed:output_type -> proto.Boolean
	14, // 47: proto.WithdrawAPI.EthTransactionSent:output_type -> proto.Boolean
	4,  // 48: proto.InfoAPI.Ping:output_type -> proto.PingResponse
	14, // 49: proto.InfoAPI.CheckEthTransaction:output_type -> proto.Boolean
	14, // 50: proto.InfoAPI.CheckNeoTransaction:output_type -> proto.Boolean
	9,  // 51: proto.InfoAPI.SwapInfoList:output_type -> proto.SwapInfos
	9,  // 52: proto.InfoAPI.SwapInfosByAddress:output_type -> proto.SwapInfos
	8,  // 53: proto.InfoAPI.SwapInfoByTxHash:output_type -> proto.SwapInfo
	9,  // 54: proto.InfoAPI.SwapInfosByState:output_type -> proto.SwapInfos
	18, // 55: proto.InfoAPI.SwapCountByState:output_type -> proto.Map
	18, // 56: proto.InfoAPI.SwapAmountByState:output_type -> proto.Map
	12, // 57: proto.InfoAPI.SwapAmountByAddress:output_type -> proto.AmountByAddressResponse
	11, // 58: proto.InfoAPI.SwapUnconfirmeds:output_type -> proto.SwapPendings
	13, // 59: proto.DebugAPI.SignData:output_type -> proto.SignDataResponse
	21, // 60: proto.QGasSwapAPI.GetPledgeBlock:output_type -> proto.StateBlockHash
	14, // 61: proto.QGasSwapAPI.PledgeEthTxSent:output_type -> proto.Boolean
	21, // 62: proto.QGasSwapAPI.GetWithdrawBlock:output_type -> proto.StateBlockHash
	15, // 63: proto.QGasSwapAPI.GetEthOwnerSign:output_type -> proto.String
	14, // 64: proto.QGasSwapAPI.WithdrawEthTxSent:output_type -> proto.Boolean
	16, // 65: proto.QGasSwapAPI.ProcessBlock:output_type -> proto.Hash
	25, // 66: proto.QGasSwapAPI.SwapInfoList:output_type -> proto.QGasSwapInfos
	25, // 67: proto.QGasSwapAPI.SwapInfosByAddress:output_type -> proto.QGasSwapInfos
	24, // 68: proto.QGasSwapAPI.SwapInfoByTxHash:output_type -> proto.QGasSwapInfo
	25, // 69: proto.QGasSwapAPI.SwapInfosByState:output_type -> proto.QGasSwapInfos
	18, // 70: proto.QGasSwapAPI.SwapInfosCount:output_type -> proto.Map
	18, // 71: proto.QGasSwapAPI.SwapInfosAmount:output_type -> proto.Map
	38, // [38:72] is the sub-list for method output_type
	4,  // [4:38] is the sub-list for method input_type
	4,  // [4:4] is the sub-list for extension type_name
	4,  // [4:4] is the sub-list for extension extendee
	0,  // [0:4] is the sub-list for field type_name
}

func init() { file_types_proto_init() }
func file_types_proto_init() {
	if File_types_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_types_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PackNeoTxRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PackNeoTxResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendNeoTxnRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EthTransactionSentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PingResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Offset); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddrAndOffset); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StateAndOffset); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SwapInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SwapInfos); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SwapPending); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SwapPendings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AmountByAddressResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignDataResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Boolean); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*String); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Hash); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Address); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Map); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QGasPledgeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QGasWithdrawRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StateBlockHash); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StateBlockSigned); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EthTxSentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QGasSwapInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QGasSwapInfos); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_types_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   27,
			NumExtensions: 0,
			NumServices:   5,
		},
		GoTypes:           file_types_proto_goTypes,
		DependencyIndexes: file_types_proto_depIdxs,
		MessageInfos:      file_types_proto_msgTypes,
	}.Build()
	File_types_proto = out.File
	file_types_proto_rawDesc = nil
	file_types_proto_goTypes = nil
	file_types_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// DepositAPIClient is the client API for DepositAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DepositAPIClient interface {
	PackNeoTransaction(ctx context.Context, in *PackNeoTxRequest, opts ...grpc.CallOption) (*PackNeoTxResponse, error)
	SendNeoTransaction(ctx context.Context, in *SendNeoTxnRequest, opts ...grpc.CallOption) (*Boolean, error)
	NeoTransactionConfirmed(ctx context.Context, in *Hash, opts ...grpc.CallOption) (*Boolean, error)
	GetEthOwnerSign(ctx context.Context, in *Hash, opts ...grpc.CallOption) (*String, error)
	EthTransactionConfirmed(ctx context.Context, in *Hash, opts ...grpc.CallOption) (*Boolean, error)
	EthTransactionSent(ctx context.Context, in *EthTransactionSentRequest, opts ...grpc.CallOption) (*Boolean, error)
	EthTransactionID(ctx context.Context, in *Hash, opts ...grpc.CallOption) (*Hash, error)
	Refund(ctx context.Context, in *Hash, opts ...grpc.CallOption) (*Boolean, error)
}

type depositAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewDepositAPIClient(cc grpc.ClientConnInterface) DepositAPIClient {
	return &depositAPIClient{cc}
}

func (c *depositAPIClient) PackNeoTransaction(ctx context.Context, in *PackNeoTxRequest, opts ...grpc.CallOption) (*PackNeoTxResponse, error) {
	out := new(PackNeoTxResponse)
	err := c.cc.Invoke(ctx, "/proto.DepositAPI/PackNeoTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *depositAPIClient) SendNeoTransaction(ctx context.Context, in *SendNeoTxnRequest, opts ...grpc.CallOption) (*Boolean, error) {
	out := new(Boolean)
	err := c.cc.Invoke(ctx, "/proto.DepositAPI/SendNeoTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *depositAPIClient) NeoTransactionConfirmed(ctx context.Context, in *Hash, opts ...grpc.CallOption) (*Boolean, error) {
	out := new(Boolean)
	err := c.cc.Invoke(ctx, "/proto.DepositAPI/NeoTransactionConfirmed", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *depositAPIClient) GetEthOwnerSign(ctx context.Context, in *Hash, opts ...grpc.CallOption) (*String, error) {
	out := new(String)
	err := c.cc.Invoke(ctx, "/proto.DepositAPI/GetEthOwnerSign", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *depositAPIClient) EthTransactionConfirmed(ctx context.Context, in *Hash, opts ...grpc.CallOption) (*Boolean, error) {
	out := new(Boolean)
	err := c.cc.Invoke(ctx, "/proto.DepositAPI/EthTransactionConfirmed", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *depositAPIClient) EthTransactionSent(ctx context.Context, in *EthTransactionSentRequest, opts ...grpc.CallOption) (*Boolean, error) {
	out := new(Boolean)
	err := c.cc.Invoke(ctx, "/proto.DepositAPI/EthTransactionSent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *depositAPIClient) EthTransactionID(ctx context.Context, in *Hash, opts ...grpc.CallOption) (*Hash, error) {
	out := new(Hash)
	err := c.cc.Invoke(ctx, "/proto.DepositAPI/EthTransactionID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *depositAPIClient) Refund(ctx context.Context, in *Hash, opts ...grpc.CallOption) (*Boolean, error) {
	out := new(Boolean)
	err := c.cc.Invoke(ctx, "/proto.DepositAPI/Refund", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DepositAPIServer is the server API for DepositAPI service.
type DepositAPIServer interface {
	PackNeoTransaction(context.Context, *PackNeoTxRequest) (*PackNeoTxResponse, error)
	SendNeoTransaction(context.Context, *SendNeoTxnRequest) (*Boolean, error)
	NeoTransactionConfirmed(context.Context, *Hash) (*Boolean, error)
	GetEthOwnerSign(context.Context, *Hash) (*String, error)
	EthTransactionConfirmed(context.Context, *Hash) (*Boolean, error)
	EthTransactionSent(context.Context, *EthTransactionSentRequest) (*Boolean, error)
	EthTransactionID(context.Context, *Hash) (*Hash, error)
	Refund(context.Context, *Hash) (*Boolean, error)
}

// UnimplementedDepositAPIServer can be embedded to have forward compatible implementations.
type UnimplementedDepositAPIServer struct {
}

func (*UnimplementedDepositAPIServer) PackNeoTransaction(context.Context, *PackNeoTxRequest) (*PackNeoTxResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PackNeoTransaction not implemented")
}
func (*UnimplementedDepositAPIServer) SendNeoTransaction(context.Context, *SendNeoTxnRequest) (*Boolean, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendNeoTransaction not implemented")
}
func (*UnimplementedDepositAPIServer) NeoTransactionConfirmed(context.Context, *Hash) (*Boolean, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NeoTransactionConfirmed not implemented")
}
func (*UnimplementedDepositAPIServer) GetEthOwnerSign(context.Context, *Hash) (*String, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEthOwnerSign not implemented")
}
func (*UnimplementedDepositAPIServer) EthTransactionConfirmed(context.Context, *Hash) (*Boolean, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EthTransactionConfirmed not implemented")
}
func (*UnimplementedDepositAPIServer) EthTransactionSent(context.Context, *EthTransactionSentRequest) (*Boolean, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EthTransactionSent not implemented")
}
func (*UnimplementedDepositAPIServer) EthTransactionID(context.Context, *Hash) (*Hash, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EthTransactionID not implemented")
}
func (*UnimplementedDepositAPIServer) Refund(context.Context, *Hash) (*Boolean, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Refund not implemented")
}

func RegisterDepositAPIServer(s *grpc.Server, srv DepositAPIServer) {
	s.RegisterService(&_DepositAPI_serviceDesc, srv)
}

func _DepositAPI_PackNeoTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PackNeoTxRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DepositAPIServer).PackNeoTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DepositAPI/PackNeoTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DepositAPIServer).PackNeoTransaction(ctx, req.(*PackNeoTxRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DepositAPI_SendNeoTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendNeoTxnRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DepositAPIServer).SendNeoTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DepositAPI/SendNeoTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DepositAPIServer).SendNeoTransaction(ctx, req.(*SendNeoTxnRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DepositAPI_NeoTransactionConfirmed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Hash)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DepositAPIServer).NeoTransactionConfirmed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DepositAPI/NeoTransactionConfirmed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DepositAPIServer).NeoTransactionConfirmed(ctx, req.(*Hash))
	}
	return interceptor(ctx, in, info, handler)
}

func _DepositAPI_GetEthOwnerSign_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Hash)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DepositAPIServer).GetEthOwnerSign(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DepositAPI/GetEthOwnerSign",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DepositAPIServer).GetEthOwnerSign(ctx, req.(*Hash))
	}
	return interceptor(ctx, in, info, handler)
}

func _DepositAPI_EthTransactionConfirmed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Hash)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DepositAPIServer).EthTransactionConfirmed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DepositAPI/EthTransactionConfirmed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DepositAPIServer).EthTransactionConfirmed(ctx, req.(*Hash))
	}
	return interceptor(ctx, in, info, handler)
}

func _DepositAPI_EthTransactionSent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EthTransactionSentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DepositAPIServer).EthTransactionSent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DepositAPI/EthTransactionSent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DepositAPIServer).EthTransactionSent(ctx, req.(*EthTransactionSentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DepositAPI_EthTransactionID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Hash)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DepositAPIServer).EthTransactionID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DepositAPI/EthTransactionID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DepositAPIServer).EthTransactionID(ctx, req.(*Hash))
	}
	return interceptor(ctx, in, info, handler)
}

func _DepositAPI_Refund_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Hash)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DepositAPIServer).Refund(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DepositAPI/Refund",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DepositAPIServer).Refund(ctx, req.(*Hash))
	}
	return interceptor(ctx, in, info, handler)
}

var _DepositAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.DepositAPI",
	HandlerType: (*DepositAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PackNeoTransaction",
			Handler:    _DepositAPI_PackNeoTransaction_Handler,
		},
		{
			MethodName: "SendNeoTransaction",
			Handler:    _DepositAPI_SendNeoTransaction_Handler,
		},
		{
			MethodName: "NeoTransactionConfirmed",
			Handler:    _DepositAPI_NeoTransactionConfirmed_Handler,
		},
		{
			MethodName: "GetEthOwnerSign",
			Handler:    _DepositAPI_GetEthOwnerSign_Handler,
		},
		{
			MethodName: "EthTransactionConfirmed",
			Handler:    _DepositAPI_EthTransactionConfirmed_Handler,
		},
		{
			MethodName: "EthTransactionSent",
			Handler:    _DepositAPI_EthTransactionSent_Handler,
		},
		{
			MethodName: "EthTransactionID",
			Handler:    _DepositAPI_EthTransactionID_Handler,
		},
		{
			MethodName: "Refund",
			Handler:    _DepositAPI_Refund_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "types.proto",
}

// WithdrawAPIClient is the client API for WithdrawAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type WithdrawAPIClient interface {
	EthTransactionConfirmed(ctx context.Context, in *Hash, opts ...grpc.CallOption) (*Boolean, error)
	EthTransactionSent(ctx context.Context, in *Hash, opts ...grpc.CallOption) (*Boolean, error)
}

type withdrawAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewWithdrawAPIClient(cc grpc.ClientConnInterface) WithdrawAPIClient {
	return &withdrawAPIClient{cc}
}

func (c *withdrawAPIClient) EthTransactionConfirmed(ctx context.Context, in *Hash, opts ...grpc.CallOption) (*Boolean, error) {
	out := new(Boolean)
	err := c.cc.Invoke(ctx, "/proto.WithdrawAPI/EthTransactionConfirmed", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *withdrawAPIClient) EthTransactionSent(ctx context.Context, in *Hash, opts ...grpc.CallOption) (*Boolean, error) {
	out := new(Boolean)
	err := c.cc.Invoke(ctx, "/proto.WithdrawAPI/EthTransactionSent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WithdrawAPIServer is the server API for WithdrawAPI service.
type WithdrawAPIServer interface {
	EthTransactionConfirmed(context.Context, *Hash) (*Boolean, error)
	EthTransactionSent(context.Context, *Hash) (*Boolean, error)
}

// UnimplementedWithdrawAPIServer can be embedded to have forward compatible implementations.
type UnimplementedWithdrawAPIServer struct {
}

func (*UnimplementedWithdrawAPIServer) EthTransactionConfirmed(context.Context, *Hash) (*Boolean, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EthTransactionConfirmed not implemented")
}
func (*UnimplementedWithdrawAPIServer) EthTransactionSent(context.Context, *Hash) (*Boolean, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EthTransactionSent not implemented")
}

func RegisterWithdrawAPIServer(s *grpc.Server, srv WithdrawAPIServer) {
	s.RegisterService(&_WithdrawAPI_serviceDesc, srv)
}

func _WithdrawAPI_EthTransactionConfirmed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Hash)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WithdrawAPIServer).EthTransactionConfirmed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.WithdrawAPI/EthTransactionConfirmed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WithdrawAPIServer).EthTransactionConfirmed(ctx, req.(*Hash))
	}
	return interceptor(ctx, in, info, handler)
}

func _WithdrawAPI_EthTransactionSent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Hash)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WithdrawAPIServer).EthTransactionSent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.WithdrawAPI/EthTransactionSent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WithdrawAPIServer).EthTransactionSent(ctx, req.(*Hash))
	}
	return interceptor(ctx, in, info, handler)
}

var _WithdrawAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.WithdrawAPI",
	HandlerType: (*WithdrawAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "EthTransactionConfirmed",
			Handler:    _WithdrawAPI_EthTransactionConfirmed_Handler,
		},
		{
			MethodName: "EthTransactionSent",
			Handler:    _WithdrawAPI_EthTransactionSent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "types.proto",
}

// InfoAPIClient is the client API for InfoAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type InfoAPIClient interface {
	Ping(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*PingResponse, error)
	CheckEthTransaction(ctx context.Context, in *Hash, opts ...grpc.CallOption) (*Boolean, error)
	CheckNeoTransaction(ctx context.Context, in *Hash, opts ...grpc.CallOption) (*Boolean, error)
	SwapInfoList(ctx context.Context, in *Offset, opts ...grpc.CallOption) (*SwapInfos, error)
	SwapInfosByAddress(ctx context.Context, in *AddrAndOffset, opts ...grpc.CallOption) (*SwapInfos, error)
	SwapInfoByTxHash(ctx context.Context, in *Hash, opts ...grpc.CallOption) (*SwapInfo, error)
	SwapInfosByState(ctx context.Context, in *StateAndOffset, opts ...grpc.CallOption) (*SwapInfos, error)
	SwapCountByState(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Map, error)
	SwapAmountByState(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Map, error)
	SwapAmountByAddress(ctx context.Context, in *Address, opts ...grpc.CallOption) (*AmountByAddressResponse, error)
	SwapUnconfirmeds(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*SwapPendings, error)
}

type infoAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewInfoAPIClient(cc grpc.ClientConnInterface) InfoAPIClient {
	return &infoAPIClient{cc}
}

func (c *infoAPIClient) Ping(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*PingResponse, error) {
	out := new(PingResponse)
	err := c.cc.Invoke(ctx, "/proto.InfoAPI/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infoAPIClient) CheckEthTransaction(ctx context.Context, in *Hash, opts ...grpc.CallOption) (*Boolean, error) {
	out := new(Boolean)
	err := c.cc.Invoke(ctx, "/proto.InfoAPI/CheckEthTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infoAPIClient) CheckNeoTransaction(ctx context.Context, in *Hash, opts ...grpc.CallOption) (*Boolean, error) {
	out := new(Boolean)
	err := c.cc.Invoke(ctx, "/proto.InfoAPI/CheckNeoTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infoAPIClient) SwapInfoList(ctx context.Context, in *Offset, opts ...grpc.CallOption) (*SwapInfos, error) {
	out := new(SwapInfos)
	err := c.cc.Invoke(ctx, "/proto.InfoAPI/SwapInfoList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infoAPIClient) SwapInfosByAddress(ctx context.Context, in *AddrAndOffset, opts ...grpc.CallOption) (*SwapInfos, error) {
	out := new(SwapInfos)
	err := c.cc.Invoke(ctx, "/proto.InfoAPI/SwapInfosByAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infoAPIClient) SwapInfoByTxHash(ctx context.Context, in *Hash, opts ...grpc.CallOption) (*SwapInfo, error) {
	out := new(SwapInfo)
	err := c.cc.Invoke(ctx, "/proto.InfoAPI/SwapInfoByTxHash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infoAPIClient) SwapInfosByState(ctx context.Context, in *StateAndOffset, opts ...grpc.CallOption) (*SwapInfos, error) {
	out := new(SwapInfos)
	err := c.cc.Invoke(ctx, "/proto.InfoAPI/SwapInfosByState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infoAPIClient) SwapCountByState(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Map, error) {
	out := new(Map)
	err := c.cc.Invoke(ctx, "/proto.InfoAPI/SwapCountByState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infoAPIClient) SwapAmountByState(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Map, error) {
	out := new(Map)
	err := c.cc.Invoke(ctx, "/proto.InfoAPI/SwapAmountByState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infoAPIClient) SwapAmountByAddress(ctx context.Context, in *Address, opts ...grpc.CallOption) (*AmountByAddressResponse, error) {
	out := new(AmountByAddressResponse)
	err := c.cc.Invoke(ctx, "/proto.InfoAPI/SwapAmountByAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infoAPIClient) SwapUnconfirmeds(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*SwapPendings, error) {
	out := new(SwapPendings)
	err := c.cc.Invoke(ctx, "/proto.InfoAPI/SwapUnconfirmeds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InfoAPIServer is the server API for InfoAPI service.
type InfoAPIServer interface {
	Ping(context.Context, *empty.Empty) (*PingResponse, error)
	CheckEthTransaction(context.Context, *Hash) (*Boolean, error)
	CheckNeoTransaction(context.Context, *Hash) (*Boolean, error)
	SwapInfoList(context.Context, *Offset) (*SwapInfos, error)
	SwapInfosByAddress(context.Context, *AddrAndOffset) (*SwapInfos, error)
	SwapInfoByTxHash(context.Context, *Hash) (*SwapInfo, error)
	SwapInfosByState(context.Context, *StateAndOffset) (*SwapInfos, error)
	SwapCountByState(context.Context, *empty.Empty) (*Map, error)
	SwapAmountByState(context.Context, *empty.Empty) (*Map, error)
	SwapAmountByAddress(context.Context, *Address) (*AmountByAddressResponse, error)
	SwapUnconfirmeds(context.Context, *empty.Empty) (*SwapPendings, error)
}

// UnimplementedInfoAPIServer can be embedded to have forward compatible implementations.
type UnimplementedInfoAPIServer struct {
}

func (*UnimplementedInfoAPIServer) Ping(context.Context, *empty.Empty) (*PingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (*UnimplementedInfoAPIServer) CheckEthTransaction(context.Context, *Hash) (*Boolean, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckEthTransaction not implemented")
}
func (*UnimplementedInfoAPIServer) CheckNeoTransaction(context.Context, *Hash) (*Boolean, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckNeoTransaction not implemented")
}
func (*UnimplementedInfoAPIServer) SwapInfoList(context.Context, *Offset) (*SwapInfos, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SwapInfoList not implemented")
}
func (*UnimplementedInfoAPIServer) SwapInfosByAddress(context.Context, *AddrAndOffset) (*SwapInfos, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SwapInfosByAddress not implemented")
}
func (*UnimplementedInfoAPIServer) SwapInfoByTxHash(context.Context, *Hash) (*SwapInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SwapInfoByTxHash not implemented")
}
func (*UnimplementedInfoAPIServer) SwapInfosByState(context.Context, *StateAndOffset) (*SwapInfos, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SwapInfosByState not implemented")
}
func (*UnimplementedInfoAPIServer) SwapCountByState(context.Context, *empty.Empty) (*Map, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SwapCountByState not implemented")
}
func (*UnimplementedInfoAPIServer) SwapAmountByState(context.Context, *empty.Empty) (*Map, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SwapAmountByState not implemented")
}
func (*UnimplementedInfoAPIServer) SwapAmountByAddress(context.Context, *Address) (*AmountByAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SwapAmountByAddress not implemented")
}
func (*UnimplementedInfoAPIServer) SwapUnconfirmeds(context.Context, *empty.Empty) (*SwapPendings, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SwapUnconfirmeds not implemented")
}

func RegisterInfoAPIServer(s *grpc.Server, srv InfoAPIServer) {
	s.RegisterService(&_InfoAPI_serviceDesc, srv)
}

func _InfoAPI_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfoAPIServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.InfoAPI/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfoAPIServer).Ping(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfoAPI_CheckEthTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Hash)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfoAPIServer).CheckEthTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.InfoAPI/CheckEthTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfoAPIServer).CheckEthTransaction(ctx, req.(*Hash))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfoAPI_CheckNeoTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Hash)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfoAPIServer).CheckNeoTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.InfoAPI/CheckNeoTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfoAPIServer).CheckNeoTransaction(ctx, req.(*Hash))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfoAPI_SwapInfoList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Offset)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfoAPIServer).SwapInfoList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.InfoAPI/SwapInfoList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfoAPIServer).SwapInfoList(ctx, req.(*Offset))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfoAPI_SwapInfosByAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddrAndOffset)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfoAPIServer).SwapInfosByAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.InfoAPI/SwapInfosByAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfoAPIServer).SwapInfosByAddress(ctx, req.(*AddrAndOffset))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfoAPI_SwapInfoByTxHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Hash)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfoAPIServer).SwapInfoByTxHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.InfoAPI/SwapInfoByTxHash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfoAPIServer).SwapInfoByTxHash(ctx, req.(*Hash))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfoAPI_SwapInfosByState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StateAndOffset)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfoAPIServer).SwapInfosByState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.InfoAPI/SwapInfosByState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfoAPIServer).SwapInfosByState(ctx, req.(*StateAndOffset))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfoAPI_SwapCountByState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfoAPIServer).SwapCountByState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.InfoAPI/SwapCountByState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfoAPIServer).SwapCountByState(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfoAPI_SwapAmountByState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfoAPIServer).SwapAmountByState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.InfoAPI/SwapAmountByState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfoAPIServer).SwapAmountByState(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfoAPI_SwapAmountByAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Address)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfoAPIServer).SwapAmountByAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.InfoAPI/SwapAmountByAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfoAPIServer).SwapAmountByAddress(ctx, req.(*Address))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfoAPI_SwapUnconfirmeds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfoAPIServer).SwapUnconfirmeds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.InfoAPI/SwapUnconfirmeds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfoAPIServer).SwapUnconfirmeds(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _InfoAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.InfoAPI",
	HandlerType: (*InfoAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _InfoAPI_Ping_Handler,
		},
		{
			MethodName: "CheckEthTransaction",
			Handler:    _InfoAPI_CheckEthTransaction_Handler,
		},
		{
			MethodName: "CheckNeoTransaction",
			Handler:    _InfoAPI_CheckNeoTransaction_Handler,
		},
		{
			MethodName: "SwapInfoList",
			Handler:    _InfoAPI_SwapInfoList_Handler,
		},
		{
			MethodName: "SwapInfosByAddress",
			Handler:    _InfoAPI_SwapInfosByAddress_Handler,
		},
		{
			MethodName: "SwapInfoByTxHash",
			Handler:    _InfoAPI_SwapInfoByTxHash_Handler,
		},
		{
			MethodName: "SwapInfosByState",
			Handler:    _InfoAPI_SwapInfosByState_Handler,
		},
		{
			MethodName: "SwapCountByState",
			Handler:    _InfoAPI_SwapCountByState_Handler,
		},
		{
			MethodName: "SwapAmountByState",
			Handler:    _InfoAPI_SwapAmountByState_Handler,
		},
		{
			MethodName: "SwapAmountByAddress",
			Handler:    _InfoAPI_SwapAmountByAddress_Handler,
		},
		{
			MethodName: "SwapUnconfirmeds",
			Handler:    _InfoAPI_SwapUnconfirmeds_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "types.proto",
}

// DebugAPIClient is the client API for DebugAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DebugAPIClient interface {
	SignData(ctx context.Context, in *String, opts ...grpc.CallOption) (*SignDataResponse, error)
}

type debugAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewDebugAPIClient(cc grpc.ClientConnInterface) DebugAPIClient {
	return &debugAPIClient{cc}
}

func (c *debugAPIClient) SignData(ctx context.Context, in *String, opts ...grpc.CallOption) (*SignDataResponse, error) {
	out := new(SignDataResponse)
	err := c.cc.Invoke(ctx, "/proto.DebugAPI/SignData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DebugAPIServer is the server API for DebugAPI service.
type DebugAPIServer interface {
	SignData(context.Context, *String) (*SignDataResponse, error)
}

// UnimplementedDebugAPIServer can be embedded to have forward compatible implementations.
type UnimplementedDebugAPIServer struct {
}

func (*UnimplementedDebugAPIServer) SignData(context.Context, *String) (*SignDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignData not implemented")
}

func RegisterDebugAPIServer(s *grpc.Server, srv DebugAPIServer) {
	s.RegisterService(&_DebugAPI_serviceDesc, srv)
}

func _DebugAPI_SignData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(String)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DebugAPIServer).SignData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DebugAPI/SignData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DebugAPIServer).SignData(ctx, req.(*String))
	}
	return interceptor(ctx, in, info, handler)
}

var _DebugAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.DebugAPI",
	HandlerType: (*DebugAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SignData",
			Handler:    _DebugAPI_SignData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "types.proto",
}

// QGasSwapAPIClient is the client API for QGasSwapAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QGasSwapAPIClient interface {
	GetPledgeBlock(ctx context.Context, in *QGasPledgeRequest, opts ...grpc.CallOption) (*StateBlockHash, error)
	PledgeEthTxSent(ctx context.Context, in *EthTxSentRequest, opts ...grpc.CallOption) (*Boolean, error)
	GetWithdrawBlock(ctx context.Context, in *Hash, opts ...grpc.CallOption) (*StateBlockHash, error)
	GetEthOwnerSign(ctx context.Context, in *Hash, opts ...grpc.CallOption) (*String, error)
	WithdrawEthTxSent(ctx context.Context, in *Hash, opts ...grpc.CallOption) (*Boolean, error)
	ProcessBlock(ctx context.Context, in *StateBlockSigned, opts ...grpc.CallOption) (*Hash, error)
	SwapInfoList(ctx context.Context, in *Offset, opts ...grpc.CallOption) (*QGasSwapInfos, error)
	SwapInfosByAddress(ctx context.Context, in *AddrAndOffset, opts ...grpc.CallOption) (*QGasSwapInfos, error)
	SwapInfoByTxHash(ctx context.Context, in *Hash, opts ...grpc.CallOption) (*QGasSwapInfo, error)
	SwapInfosByState(ctx context.Context, in *StateAndOffset, opts ...grpc.CallOption) (*QGasSwapInfos, error)
	SwapInfosCount(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Map, error)
	SwapInfosAmount(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Map, error)
}

type qGasSwapAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewQGasSwapAPIClient(cc grpc.ClientConnInterface) QGasSwapAPIClient {
	return &qGasSwapAPIClient{cc}
}

func (c *qGasSwapAPIClient) GetPledgeBlock(ctx context.Context, in *QGasPledgeRequest, opts ...grpc.CallOption) (*StateBlockHash, error) {
	out := new(StateBlockHash)
	err := c.cc.Invoke(ctx, "/proto.QGasSwapAPI/GetPledgeBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qGasSwapAPIClient) PledgeEthTxSent(ctx context.Context, in *EthTxSentRequest, opts ...grpc.CallOption) (*Boolean, error) {
	out := new(Boolean)
	err := c.cc.Invoke(ctx, "/proto.QGasSwapAPI/PledgeEthTxSent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qGasSwapAPIClient) GetWithdrawBlock(ctx context.Context, in *Hash, opts ...grpc.CallOption) (*StateBlockHash, error) {
	out := new(StateBlockHash)
	err := c.cc.Invoke(ctx, "/proto.QGasSwapAPI/GetWithdrawBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qGasSwapAPIClient) GetEthOwnerSign(ctx context.Context, in *Hash, opts ...grpc.CallOption) (*String, error) {
	out := new(String)
	err := c.cc.Invoke(ctx, "/proto.QGasSwapAPI/GetEthOwnerSign", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qGasSwapAPIClient) WithdrawEthTxSent(ctx context.Context, in *Hash, opts ...grpc.CallOption) (*Boolean, error) {
	out := new(Boolean)
	err := c.cc.Invoke(ctx, "/proto.QGasSwapAPI/WithdrawEthTxSent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qGasSwapAPIClient) ProcessBlock(ctx context.Context, in *StateBlockSigned, opts ...grpc.CallOption) (*Hash, error) {
	out := new(Hash)
	err := c.cc.Invoke(ctx, "/proto.QGasSwapAPI/ProcessBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qGasSwapAPIClient) SwapInfoList(ctx context.Context, in *Offset, opts ...grpc.CallOption) (*QGasSwapInfos, error) {
	out := new(QGasSwapInfos)
	err := c.cc.Invoke(ctx, "/proto.QGasSwapAPI/SwapInfoList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qGasSwapAPIClient) SwapInfosByAddress(ctx context.Context, in *AddrAndOffset, opts ...grpc.CallOption) (*QGasSwapInfos, error) {
	out := new(QGasSwapInfos)
	err := c.cc.Invoke(ctx, "/proto.QGasSwapAPI/SwapInfosByAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qGasSwapAPIClient) SwapInfoByTxHash(ctx context.Context, in *Hash, opts ...grpc.CallOption) (*QGasSwapInfo, error) {
	out := new(QGasSwapInfo)
	err := c.cc.Invoke(ctx, "/proto.QGasSwapAPI/SwapInfoByTxHash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qGasSwapAPIClient) SwapInfosByState(ctx context.Context, in *StateAndOffset, opts ...grpc.CallOption) (*QGasSwapInfos, error) {
	out := new(QGasSwapInfos)
	err := c.cc.Invoke(ctx, "/proto.QGasSwapAPI/SwapInfosByState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qGasSwapAPIClient) SwapInfosCount(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Map, error) {
	out := new(Map)
	err := c.cc.Invoke(ctx, "/proto.QGasSwapAPI/SwapInfosCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qGasSwapAPIClient) SwapInfosAmount(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Map, error) {
	out := new(Map)
	err := c.cc.Invoke(ctx, "/proto.QGasSwapAPI/SwapInfosAmount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QGasSwapAPIServer is the server API for QGasSwapAPI service.
type QGasSwapAPIServer interface {
	GetPledgeBlock(context.Context, *QGasPledgeRequest) (*StateBlockHash, error)
	PledgeEthTxSent(context.Context, *EthTxSentRequest) (*Boolean, error)
	GetWithdrawBlock(context.Context, *Hash) (*StateBlockHash, error)
	GetEthOwnerSign(context.Context, *Hash) (*String, error)
	WithdrawEthTxSent(context.Context, *Hash) (*Boolean, error)
	ProcessBlock(context.Context, *StateBlockSigned) (*Hash, error)
	SwapInfoList(context.Context, *Offset) (*QGasSwapInfos, error)
	SwapInfosByAddress(context.Context, *AddrAndOffset) (*QGasSwapInfos, error)
	SwapInfoByTxHash(context.Context, *Hash) (*QGasSwapInfo, error)
	SwapInfosByState(context.Context, *StateAndOffset) (*QGasSwapInfos, error)
	SwapInfosCount(context.Context, *empty.Empty) (*Map, error)
	SwapInfosAmount(context.Context, *empty.Empty) (*Map, error)
}

// UnimplementedQGasSwapAPIServer can be embedded to have forward compatible implementations.
type UnimplementedQGasSwapAPIServer struct {
}

func (*UnimplementedQGasSwapAPIServer) GetPledgeBlock(context.Context, *QGasPledgeRequest) (*StateBlockHash, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPledgeBlock not implemented")
}
func (*UnimplementedQGasSwapAPIServer) PledgeEthTxSent(context.Context, *EthTxSentRequest) (*Boolean, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PledgeEthTxSent not implemented")
}
func (*UnimplementedQGasSwapAPIServer) GetWithdrawBlock(context.Context, *Hash) (*StateBlockHash, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWithdrawBlock not implemented")
}
func (*UnimplementedQGasSwapAPIServer) GetEthOwnerSign(context.Context, *Hash) (*String, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEthOwnerSign not implemented")
}
func (*UnimplementedQGasSwapAPIServer) WithdrawEthTxSent(context.Context, *Hash) (*Boolean, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WithdrawEthTxSent not implemented")
}
func (*UnimplementedQGasSwapAPIServer) ProcessBlock(context.Context, *StateBlockSigned) (*Hash, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessBlock not implemented")
}
func (*UnimplementedQGasSwapAPIServer) SwapInfoList(context.Context, *Offset) (*QGasSwapInfos, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SwapInfoList not implemented")
}
func (*UnimplementedQGasSwapAPIServer) SwapInfosByAddress(context.Context, *AddrAndOffset) (*QGasSwapInfos, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SwapInfosByAddress not implemented")
}
func (*UnimplementedQGasSwapAPIServer) SwapInfoByTxHash(context.Context, *Hash) (*QGasSwapInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SwapInfoByTxHash not implemented")
}
func (*UnimplementedQGasSwapAPIServer) SwapInfosByState(context.Context, *StateAndOffset) (*QGasSwapInfos, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SwapInfosByState not implemented")
}
func (*UnimplementedQGasSwapAPIServer) SwapInfosCount(context.Context, *empty.Empty) (*Map, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SwapInfosCount not implemented")
}
func (*UnimplementedQGasSwapAPIServer) SwapInfosAmount(context.Context, *empty.Empty) (*Map, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SwapInfosAmount not implemented")
}

func RegisterQGasSwapAPIServer(s *grpc.Server, srv QGasSwapAPIServer) {
	s.RegisterService(&_QGasSwapAPI_serviceDesc, srv)
}

func _QGasSwapAPI_GetPledgeBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QGasPledgeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QGasSwapAPIServer).GetPledgeBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.QGasSwapAPI/GetPledgeBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QGasSwapAPIServer).GetPledgeBlock(ctx, req.(*QGasPledgeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QGasSwapAPI_PledgeEthTxSent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EthTxSentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QGasSwapAPIServer).PledgeEthTxSent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.QGasSwapAPI/PledgeEthTxSent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QGasSwapAPIServer).PledgeEthTxSent(ctx, req.(*EthTxSentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QGasSwapAPI_GetWithdrawBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Hash)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QGasSwapAPIServer).GetWithdrawBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.QGasSwapAPI/GetWithdrawBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QGasSwapAPIServer).GetWithdrawBlock(ctx, req.(*Hash))
	}
	return interceptor(ctx, in, info, handler)
}

func _QGasSwapAPI_GetEthOwnerSign_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Hash)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QGasSwapAPIServer).GetEthOwnerSign(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.QGasSwapAPI/GetEthOwnerSign",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QGasSwapAPIServer).GetEthOwnerSign(ctx, req.(*Hash))
	}
	return interceptor(ctx, in, info, handler)
}

func _QGasSwapAPI_WithdrawEthTxSent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Hash)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QGasSwapAPIServer).WithdrawEthTxSent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.QGasSwapAPI/WithdrawEthTxSent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QGasSwapAPIServer).WithdrawEthTxSent(ctx, req.(*Hash))
	}
	return interceptor(ctx, in, info, handler)
}

func _QGasSwapAPI_ProcessBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StateBlockSigned)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QGasSwapAPIServer).ProcessBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.QGasSwapAPI/ProcessBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QGasSwapAPIServer).ProcessBlock(ctx, req.(*StateBlockSigned))
	}
	return interceptor(ctx, in, info, handler)
}

func _QGasSwapAPI_SwapInfoList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Offset)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QGasSwapAPIServer).SwapInfoList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.QGasSwapAPI/SwapInfoList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QGasSwapAPIServer).SwapInfoList(ctx, req.(*Offset))
	}
	return interceptor(ctx, in, info, handler)
}

func _QGasSwapAPI_SwapInfosByAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddrAndOffset)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QGasSwapAPIServer).SwapInfosByAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.QGasSwapAPI/SwapInfosByAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QGasSwapAPIServer).SwapInfosByAddress(ctx, req.(*AddrAndOffset))
	}
	return interceptor(ctx, in, info, handler)
}

func _QGasSwapAPI_SwapInfoByTxHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Hash)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QGasSwapAPIServer).SwapInfoByTxHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.QGasSwapAPI/SwapInfoByTxHash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QGasSwapAPIServer).SwapInfoByTxHash(ctx, req.(*Hash))
	}
	return interceptor(ctx, in, info, handler)
}

func _QGasSwapAPI_SwapInfosByState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StateAndOffset)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QGasSwapAPIServer).SwapInfosByState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.QGasSwapAPI/SwapInfosByState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QGasSwapAPIServer).SwapInfosByState(ctx, req.(*StateAndOffset))
	}
	return interceptor(ctx, in, info, handler)
}

func _QGasSwapAPI_SwapInfosCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QGasSwapAPIServer).SwapInfosCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.QGasSwapAPI/SwapInfosCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QGasSwapAPIServer).SwapInfosCount(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _QGasSwapAPI_SwapInfosAmount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QGasSwapAPIServer).SwapInfosAmount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.QGasSwapAPI/SwapInfosAmount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QGasSwapAPIServer).SwapInfosAmount(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _QGasSwapAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.QGasSwapAPI",
	HandlerType: (*QGasSwapAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPledgeBlock",
			Handler:    _QGasSwapAPI_GetPledgeBlock_Handler,
		},
		{
			MethodName: "PledgeEthTxSent",
			Handler:    _QGasSwapAPI_PledgeEthTxSent_Handler,
		},
		{
			MethodName: "GetWithdrawBlock",
			Handler:    _QGasSwapAPI_GetWithdrawBlock_Handler,
		},
		{
			MethodName: "GetEthOwnerSign",
			Handler:    _QGasSwapAPI_GetEthOwnerSign_Handler,
		},
		{
			MethodName: "WithdrawEthTxSent",
			Handler:    _QGasSwapAPI_WithdrawEthTxSent_Handler,
		},
		{
			MethodName: "ProcessBlock",
			Handler:    _QGasSwapAPI_ProcessBlock_Handler,
		},
		{
			MethodName: "SwapInfoList",
			Handler:    _QGasSwapAPI_SwapInfoList_Handler,
		},
		{
			MethodName: "SwapInfosByAddress",
			Handler:    _QGasSwapAPI_SwapInfosByAddress_Handler,
		},
		{
			MethodName: "SwapInfoByTxHash",
			Handler:    _QGasSwapAPI_SwapInfoByTxHash_Handler,
		},
		{
			MethodName: "SwapInfosByState",
			Handler:    _QGasSwapAPI_SwapInfosByState_Handler,
		},
		{
			MethodName: "SwapInfosCount",
			Handler:    _QGasSwapAPI_SwapInfosCount_Handler,
		},
		{
			MethodName: "SwapInfosAmount",
			Handler:    _QGasSwapAPI_SwapInfosAmount_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "types.proto",
}
