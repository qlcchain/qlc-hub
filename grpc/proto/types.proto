syntax = "proto3";
package proto;
option go_package = ".;proto";

import "google/api/annotations.proto";
import "google/protobuf/empty.proto";

message PackNeoTxRequest {
    int64   amount              = 1;
    string  nep5SenderAddr      = 2;
    string  erc20ReceiverAddr   = 3;
}

message PackNeoTxResponse {
    string  txHash           = 1;
    string  unsignedData     = 2;
}

message SendNeoTxnRequest {
    string  signature         = 1;
    string  txHash            = 2;
    string  publicKey         = 3;
    string  nep5SenderAddr    = 4;
}

service DepositAPI {
    rpc PackNeoTransaction(PackNeoTxRequest) returns (PackNeoTxResponse){
        option (google.api.http) = {
          post: "/deposit/packNeoTransaction"
          body: "*"
        };
    }

    rpc SendNeoTransaction(SendNeoTxnRequest) returns (Boolean){
        option (google.api.http) = {
          post: "/deposit/sendNeoTransaction"
          body: "*"
        };
    }

    rpc NeoTransactionConfirmed(Hash) returns (Boolean){
        option (google.api.http) = {
          post: "/deposit/neoTransactionConfirmed"
          body: "*"
        };
    }

    rpc GetEthOwnerSign(Hash) returns (String){
        option (google.api.http) = {
          post: "/deposit/getEthOwnerSign"
          body: "*"
        };
    }
}

service WithdrawAPI {
    rpc EthTransactionConfirmed(Hash) returns (Boolean){
        option (google.api.http) = {
          post: "/withdraw/ethTransactionConfirmed"
          body: "*"
        };
    }
}

message PingResponse {
   string neoContract   = 1;
   string neoOwner      = 2;
   string neoUrl        = 3;
   string ethContract   = 4;
   string ethOwner      = 5;
   string ethUrl        = 6;
   int64  totalSupply   = 7;
}

message Offset {
    int32   page         = 1;
    int32   pageSize     = 2;
}

message AddrAndOffset {
    string  address      = 1;
    int32   page         = 3;
    int32   pageSize     = 4;
}

message StateAndOffset {
    string  state        = 1;
    int32   page         = 2;
    int32   pageSize     = 3;
}

message SwapInfo {
    int32  state            = 1;
    string stateStr         = 2;
	int64  amount           = 3;
	string ethTxHash        = 4;
	string neoTxHash        = 5;
	string ethUserAddr      = 6;
	string neoUserAddr      = 7;
	string startTime        = 8;
	string lastModifyTime   = 9;
}

message SwapInfos {
    repeated SwapInfo infos = 1;
}

service InfoAPI {
    rpc Ping(google.protobuf.Empty) returns (PingResponse){
        option (google.api.http) = {
          get: "/info/ping"
        };
    }

    rpc CheckEthTransaction(Hash) returns (Boolean){
        option (google.api.http) = {
          get: "/info/checkEthTransaction"
        };
    }

    rpc CheckNeoTransaction(Hash) returns (Boolean){
        option (google.api.http) = {
          get: "/info/checkNeoTransaction"
        };
    }

   rpc SwapInfoList(Offset) returns (SwapInfos){
       option (google.api.http) = {
         get: "/info/swapInfoList"
       };
   }

   rpc SwapInfosByAddress(AddrAndOffset) returns (SwapInfos){
       option (google.api.http) = {
         get: "/info/swapInfosByAddress"
       };
   }

   rpc SwapInfoByTxHash(Hash) returns (SwapInfo){
       option (google.api.http) = {
         get: "/info/swapInfoByTxHash"
       };
   }

   rpc SwapInfosByState(StateAndOffset) returns (SwapInfos){
      option (google.api.http) = {
        get: "/info/swapInfosByState"
      };
   }

   rpc SwapCountByState(google.protobuf.Empty) returns (Map){
      option (google.api.http) = {
        get: "/info/swapCountByState"
      };
   }

   rpc SwapAmountByState(google.protobuf.Empty) returns (Map){
      option (google.api.http) = {
        get: "/info/swapAmountByState"
      };
   }

   rpc SwapAmountByAddress(Address) returns (AmountByAddressResponse){
      option (google.api.http) = {
        get: "/info/swapAmountByAddress"
      };
   }
}

message AmountByAddressResponse {
    string address        = 1;
    int64  balance        = 2;
    int64  pledgeCount    = 3;
    int64  pledgeAmount   = 4;
    int64  withdrawCount  = 5;
    int64  withdrawAmount = 6;
}

message SignDataResponse {
    bytes sign = 1;
    bytes verifyData = 2;
}

service DebugAPI {
    rpc SignData(String) returns (SignDataResponse){
        option (google.api.http) = {
          get: "/debug/signData"
        };
    }
}


message Boolean {
    bool value = 1;
}

message String {
    string value = 1;
}

message Hash {
    string hash = 1;
}

message Address {
    string address = 1;
}

message Map {
    map<string, int64> count = 1;
}