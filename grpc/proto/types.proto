syntax = "proto3";
package proto;
option go_package = ".;proto";

import "google/api/annotations.proto";
import "google/protobuf/empty.proto";

message PackNeoTxRequest {
    int64   amount              = 1;
    string  nep5SenderAddr      = 2;
    string  erc20ReceiverAddr   = 3;
}

message PackNeoTxResponse {
    string  txHash           = 1;
    string  unsignedData     = 2;
}

message SendNeoTxnRequest {
    string  signature         = 1;
    string  txHash            = 2;
    string  publicKey         = 3;
    string  nep5SenderAddr    = 4;
    string  chainType         = 5;

}

message NeoTxConfirmedResponse {
    string  hash           = 1;
    string  chainType      = 2;
}

message ChainTransactionSentRequest{
    string  chainTxHash         = 1;
    string  neoTxHash         = 2;
}

service DepositAPI {
    rpc PackNeoTransaction(PackNeoTxRequest) returns (PackNeoTxResponse){
        option (google.api.http) = {
          post: "/deposit/packNeoTransaction"
          body: "*"
        };
    }

    rpc SendNeoTransaction(SendNeoTxnRequest) returns (Boolean){
        option (google.api.http) = {
          post: "/deposit/sendNeoTransaction"
          body: "*"
        };
    }

    rpc NeoTransactionConfirmed(NeoTxConfirmedResponse) returns (Boolean){
        option (google.api.http) = {
          post: "/deposit/neoTransactionConfirmed"
          body: "*"
        };
    }

    rpc GetChainOwnerSign(Hash) returns (String){
        option (google.api.http) = {
          post: "/deposit/getChainOwnerSign"
          body: "*"
        };
    }

    rpc ChainTransactionConfirmed(ChainTxRequest) returns (Boolean){
        option (google.api.http) = {
          post: "/deposit/chainTransactionConfirmed"
          body: "*"
        };
    }

    rpc ChainTransactionSent(ChainTransactionSentRequest) returns (Boolean){
        option (google.api.http) = {
          post: "/deposit/chainTransactionSent"
          body: "*"
        };
    }

    rpc ChainTransactionID(Hash) returns (Hash){
        option (google.api.http) = {
          get: "/deposit/chainTransactionID"
        };
    }

    rpc Refund(Hash) returns (Boolean){
        option (google.api.http) = {
          post: "/deposit/refund"
          body: "*"
        };
    }
}

message ChainTxRequest{
    string  hash       = 1;
    string  chainType  = 2;
}

service WithdrawAPI {
    rpc ChainTransactionSent(ChainTxRequest) returns (Boolean){
        option (google.api.http) = {
          post: "/withdraw/chainTransactionSent"
          body: "*"
        };
    }

    rpc ChainTransactionConfirmed(ChainTxRequest) returns (Boolean){
        option (google.api.http) = {
          post: "/withdraw/chainTransactionConfirmed"
          body: "*"
        };
    }
}

message PingResponse {
   string neoContract   = 1;
   string neoOwner      = 2;
   string neoUrl        = 3;
   string ethContract   = 4;
   string ethOwner      = 5;
   string ethUrl        = 6;
   string qlcOwner      = 7;
   int64  totalSupply   = 8;
}

message ConfigResponse {
   string neoContract   = 1;
   string neoOwner      = 2;
   string neoUrl        = 3;
   string nep5EthContract   = 4;
   string nep5EthOwner      = 5;
   string nep5EthUrl        = 6;
   string qgasEthContract   = 7;
   string qgasEthOwner      = 8;
   string qgasEthUrl        = 9;
   string qgasBscContract   = 10;
   string qgasBscOwner      = 11;
   string qgasBscUrl        = 12;
   string qlcOwner          = 13;
   string qlcUrl            = 14;
   int64  totalSupply       = 15;
}

message Offset {
    int32   page         = 1;
    int32   pageSize     = 2;
}

message AddrAndOffset {
    string  address      = 1;
    int32   page         = 3;
    int32   pageSize     = 4;
}

message StateAndOffset {
    string  state        = 1;
    int32   page         = 2;
    int32   pageSize     = 3;
}

message SwapInfo {
    int32  state            = 1;
    string stateStr         = 2;
	int64  amount           = 3;
	string neoUserAddr      = 4;
    string neoTxHash        = 5;
    string chain            = 6;
    string chainUserAddr    = 7;
	string chainTxHash      = 8;
	string startTime        = 9;
	string lastModifyTime   = 10;
}

message SwapInfos {
    repeated SwapInfo infos = 1;
}

message SwapPending {
    int32  typ              = 1;
	string ethTxHash        = 2;
	string neoTxHash        = 3;
	string lastModifyTime   = 4;
}

message SwapPendings {
    repeated SwapPending infos = 1;
}

service InfoAPI {
    rpc Ping(google.protobuf.Empty) returns (PingResponse){
        option (google.api.http) = {
          get: "/info/ping"
        };
    }

    rpc Config(google.protobuf.Empty) returns (ConfigResponse){
        option (google.api.http) = {
          get: "/info/config"
        };
    }

    rpc CheckEthTransaction(Hash) returns (Boolean){
        option (google.api.http) = {
          get: "/info/checkEthTransaction"
        };
    }

    rpc CheckNeoTransaction(Hash) returns (Boolean){
        option (google.api.http) = {
          get: "/info/checkNeoTransaction"
        };
    }

   rpc SwapInfoList(Offset) returns (SwapInfos){
       option (google.api.http) = {
         get: "/info/swapInfoList"
       };
   }

   rpc SwapInfosByAddress(AddrAndOffset) returns (SwapInfos){
       option (google.api.http) = {
         get: "/info/swapInfosByAddress"
       };
   }

   rpc SwapInfoByTxHash(Hash) returns (SwapInfo){
       option (google.api.http) = {
         get: "/info/swapInfoByTxHash"
       };
   }

   rpc SwapInfosByState(StateAndOffset) returns (SwapInfos){
      option (google.api.http) = {
        get: "/info/swapInfosByState"
      };
   }

   rpc SwapCountByState(google.protobuf.Empty) returns (Map){
      option (google.api.http) = {
        get: "/info/swapCountByState"
      };
   }

   rpc SwapAmountByState(google.protobuf.Empty) returns (Map){
      option (google.api.http) = {
        get: "/info/swapAmountByState"
      };
   }

   rpc SwapAmountByAddress(Address) returns (AmountByAddressResponse){
      option (google.api.http) = {
        get: "/info/swapAmountByAddress"
      };
   }

   rpc SwapUnconfirmeds(google.protobuf.Empty) returns (SwapPendings){
      option (google.api.http) = {
         get: "/info/swapUnconfirmeds"
      };
   }
}

message AmountByAddressResponse {
    string address        = 1;
    int64  erc20Amount    = 2;
    int64  pledgeCount    = 3;
    int64  pledgeAmount   = 4;
    int64  withdrawCount  = 5;
    int64  withdrawAmount = 6;
}

message SignDataResponse {
    bytes sign = 1;
    bytes verifyData = 2;
}

service DebugAPI {
    rpc SignData(String) returns (SignDataResponse){
        option (google.api.http) = {
          get: "/debug/signData"
        };
    }
}


message Boolean {
    bool value = 1;
}

message String {
    string value = 1;
}

message Hash {
    string hash = 1;
}

message Address {
    string address = 1;
}

message Map {
    map<string, int64> count = 1;
}


message QGasPledgeRequest {
    string    fromAddress            = 1;
    int64     amount                 = 2;
    string    tokenMintedToAddress   = 3;
    string    chainType              = 4;
}

message QGasWithdrawRequest {
    string    hash        = 1;
    string    chainType   = 2;
}

message StateBlockHash {
    string  hash       = 1;
    string  root       = 2;
}

message StateBlockSigned {
    string  hash       = 1;
    string  signature  = 2;
    string  work       = 3;
}

message EthTxSentRequest{
    string  chainTxHash         = 1;
    string  qlcTxHash         = 2;
}

message QGasSwapInfo {
    int32  state            = 1;
    string stateStr         = 2;
	int64  amount           = 3;
	string qlcUserAddr      = 4;
	string qlcSendTxHash    = 5;
    string qlcRewardTxHash  = 6;
    string chain            = 7;
    string chainUserAddr    = 8;
    string chainTxHash      = 9;
	string startTime        = 10;
	string lastModifyTime   = 11;
}

message QGasSwapInfos {
    repeated QGasSwapInfo infos = 1;
}

service QGasSwapAPI {
    rpc GetPledgeSendBlock(QGasPledgeRequest) returns (StateBlockHash){
        option (google.api.http) = {
          post: "/qgasswap/getPledgeSendBlock"
          body: "*"
        };
    }

    rpc PledgeChainTxSent(EthTxSentRequest) returns (Boolean){
        option (google.api.http) = {
          post: "/qgasswap/pledgeChainTxSent"
          body: "*"
        };
    }

    rpc GetWithdrawRewardBlock(Hash) returns (StateBlockHash){
        option (google.api.http) = {
          post: "/qgasswap/getWithdrawRewardBlock"
          body: "*"
        };
    }

    rpc GetChainOwnerSign(Hash) returns (String){
        option (google.api.http) = {
          post: "/qgasswap/getChainOwnerSign"
          body: "*"
        };
    }

    rpc WithdrawChainTxSent(QGasWithdrawRequest) returns (Boolean){
        option (google.api.http) = {
          post: "/qgasswap/withdrawChainTxSent"
          body: "*"
        };
    }

    rpc ProcessBlock(StateBlockSigned) returns (Hash){
        option (google.api.http) = {
          post: "/qgasswap/processBlock"
          body: "*"
        };
    }


   rpc SwapInfoList(Offset) returns (QGasSwapInfos){
       option (google.api.http) = {
         get: "/qgasswap/swapInfoList"
       };
   }

   rpc SwapInfosByAddress(AddrAndOffset) returns (QGasSwapInfos){
       option (google.api.http) = {
         get: "/qgasswap/swapInfosByAddress"
       };
   }

   rpc SwapInfoByTxHash(Hash) returns (QGasSwapInfo){
       option (google.api.http) = {
         get: "/qgasswap/swapInfoByTxHash"
       };
   }

   rpc SwapInfosByState(StateAndOffset) returns (QGasSwapInfos){
      option (google.api.http) = {
        get: "/qgasswap/swapInfosByState"
      };
   }

   rpc SwapInfosCount(google.protobuf.Empty) returns (Map){
      option (google.api.http) = {
        get: "/qgasswap/swapInfosCount"
      };
   }

   rpc SwapInfosAmount(google.protobuf.Empty) returns (Map){
      option (google.api.http) = {
        get: "/qgasswap/swapInfosAmount"
      };
   }
}
