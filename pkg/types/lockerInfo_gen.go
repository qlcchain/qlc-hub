package types

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *LockerInfo) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			return
		}
		switch msgp.UnsafeString(field) {
		case "state":
			err = z.State.DecodeMsg(dc)
			if err != nil {
				return
			}
		case "rHash":
			z.RHash, err = dc.ReadString()
			if err != nil {
				return
			}
		case "rOrigin":
			z.ROrigin, err = dc.ReadString()
			if err != nil {
				return
			}
		case "amount":
			z.Amount, err = dc.ReadInt64()
			if err != nil {
				return
			}
		case "erc20Addr":
			z.Erc20Addr, err = dc.ReadString()
			if err != nil {
				return
			}
		case "nep5Addr":
			z.Nep5Addr, err = dc.ReadString()
			if err != nil {
				return
			}
		case "lnHash":
			z.LockedNep5Hash, err = dc.ReadString()
			if err != nil {
				return
			}
		case "lnHeight":
			z.LockedNep5Height, err = dc.ReadUint32()
			if err != nil {
				return
			}
		case "leHash":
			z.LockedErc20Hash, err = dc.ReadString()
			if err != nil {
				return
			}
		case "leHeight":
			z.LockedErc20Height, err = dc.ReadUint32()
			if err != nil {
				return
			}
		case "unHash":
			z.UnlockedNep5Hash, err = dc.ReadString()
			if err != nil {
				return
			}
		case "unHeight":
			z.UnlockedNep5Height, err = dc.ReadUint32()
			if err != nil {
				return
			}
		case "ueHash":
			z.UnlockedErc20Hash, err = dc.ReadString()
			if err != nil {
				return
			}
		case "ueHeight":
			z.UnlockedErc20Height, err = dc.ReadUint32()
			if err != nil {
				return
			}
		case "startTime":
			z.StartTime, err = dc.ReadInt64()
			if err != nil {
				return
			}
		case "lastModifyTime":
			z.LastModifyTime, err = dc.ReadInt64()
			if err != nil {
				return
			}
		case "neoTimeout":
			z.NeoTimeout, err = dc.ReadBool()
			if err != nil {
				return
			}
		case "ethTimeout":
			z.EthTimeout, err = dc.ReadBool()
			if err != nil {
				return
			}
		case "fail":
			z.Fail, err = dc.ReadBool()
			if err != nil {
				return
			}
		case "remark":
			z.Remark, err = dc.ReadString()
			if err != nil {
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *LockerInfo) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 20
	// write "state"
	err = en.Append(0xde, 0x0, 0x14, 0xa5, 0x73, 0x74, 0x61, 0x74, 0x65)
	if err != nil {
		return
	}
	err = z.State.EncodeMsg(en)
	if err != nil {
		return
	}
	// write "rHash"
	err = en.Append(0xa5, 0x72, 0x48, 0x61, 0x73, 0x68)
	if err != nil {
		return
	}
	err = en.WriteString(z.RHash)
	if err != nil {
		return
	}
	// write "rOrigin"
	err = en.Append(0xa7, 0x72, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e)
	if err != nil {
		return
	}
	err = en.WriteString(z.ROrigin)
	if err != nil {
		return
	}
	// write "amount"
	err = en.Append(0xa6, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.Amount)
	if err != nil {
		return
	}
	// write "erc20Addr"
	err = en.Append(0xa9, 0x65, 0x72, 0x63, 0x32, 0x30, 0x41, 0x64, 0x64, 0x72)
	if err != nil {
		return
	}
	err = en.WriteString(z.Erc20Addr)
	if err != nil {
		return
	}
	// write "nep5Addr"
	err = en.Append(0xa8, 0x6e, 0x65, 0x70, 0x35, 0x41, 0x64, 0x64, 0x72)
	if err != nil {
		return
	}
	err = en.WriteString(z.Nep5Addr)
	if err != nil {
		return
	}
	// write "lnHash"
	err = en.Append(0xa6, 0x6c, 0x6e, 0x48, 0x61, 0x73, 0x68)
	if err != nil {
		return
	}
	err = en.WriteString(z.LockedNep5Hash)
	if err != nil {
		return
	}
	// write "lnHeight"
	err = en.Append(0xa8, 0x6c, 0x6e, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74)
	if err != nil {
		return
	}
	err = en.WriteUint32(z.LockedNep5Height)
	if err != nil {
		return
	}
	// write "leHash"
	err = en.Append(0xa6, 0x6c, 0x65, 0x48, 0x61, 0x73, 0x68)
	if err != nil {
		return
	}
	err = en.WriteString(z.LockedErc20Hash)
	if err != nil {
		return
	}
	// write "leHeight"
	err = en.Append(0xa8, 0x6c, 0x65, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74)
	if err != nil {
		return
	}
	err = en.WriteUint32(z.LockedErc20Height)
	if err != nil {
		return
	}
	// write "unHash"
	err = en.Append(0xa6, 0x75, 0x6e, 0x48, 0x61, 0x73, 0x68)
	if err != nil {
		return
	}
	err = en.WriteString(z.UnlockedNep5Hash)
	if err != nil {
		return
	}
	// write "unHeight"
	err = en.Append(0xa8, 0x75, 0x6e, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74)
	if err != nil {
		return
	}
	err = en.WriteUint32(z.UnlockedNep5Height)
	if err != nil {
		return
	}
	// write "ueHash"
	err = en.Append(0xa6, 0x75, 0x65, 0x48, 0x61, 0x73, 0x68)
	if err != nil {
		return
	}
	err = en.WriteString(z.UnlockedErc20Hash)
	if err != nil {
		return
	}
	// write "ueHeight"
	err = en.Append(0xa8, 0x75, 0x65, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74)
	if err != nil {
		return
	}
	err = en.WriteUint32(z.UnlockedErc20Height)
	if err != nil {
		return
	}
	// write "startTime"
	err = en.Append(0xa9, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.StartTime)
	if err != nil {
		return
	}
	// write "lastModifyTime"
	err = en.Append(0xae, 0x6c, 0x61, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x54, 0x69, 0x6d, 0x65)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.LastModifyTime)
	if err != nil {
		return
	}
	// write "neoTimeout"
	err = en.Append(0xaa, 0x6e, 0x65, 0x6f, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74)
	if err != nil {
		return
	}
	err = en.WriteBool(z.NeoTimeout)
	if err != nil {
		return
	}
	// write "ethTimeout"
	err = en.Append(0xaa, 0x65, 0x74, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74)
	if err != nil {
		return
	}
	err = en.WriteBool(z.EthTimeout)
	if err != nil {
		return
	}
	// write "fail"
	err = en.Append(0xa4, 0x66, 0x61, 0x69, 0x6c)
	if err != nil {
		return
	}
	err = en.WriteBool(z.Fail)
	if err != nil {
		return
	}
	// write "remark"
	err = en.Append(0xa6, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b)
	if err != nil {
		return
	}
	err = en.WriteString(z.Remark)
	if err != nil {
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *LockerInfo) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 20
	// string "state"
	o = append(o, 0xde, 0x0, 0x14, 0xa5, 0x73, 0x74, 0x61, 0x74, 0x65)
	o, err = z.State.MarshalMsg(o)
	if err != nil {
		return
	}
	// string "rHash"
	o = append(o, 0xa5, 0x72, 0x48, 0x61, 0x73, 0x68)
	o = msgp.AppendString(o, z.RHash)
	// string "rOrigin"
	o = append(o, 0xa7, 0x72, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e)
	o = msgp.AppendString(o, z.ROrigin)
	// string "amount"
	o = append(o, 0xa6, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74)
	o = msgp.AppendInt64(o, z.Amount)
	// string "erc20Addr"
	o = append(o, 0xa9, 0x65, 0x72, 0x63, 0x32, 0x30, 0x41, 0x64, 0x64, 0x72)
	o = msgp.AppendString(o, z.Erc20Addr)
	// string "nep5Addr"
	o = append(o, 0xa8, 0x6e, 0x65, 0x70, 0x35, 0x41, 0x64, 0x64, 0x72)
	o = msgp.AppendString(o, z.Nep5Addr)
	// string "lnHash"
	o = append(o, 0xa6, 0x6c, 0x6e, 0x48, 0x61, 0x73, 0x68)
	o = msgp.AppendString(o, z.LockedNep5Hash)
	// string "lnHeight"
	o = append(o, 0xa8, 0x6c, 0x6e, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74)
	o = msgp.AppendUint32(o, z.LockedNep5Height)
	// string "leHash"
	o = append(o, 0xa6, 0x6c, 0x65, 0x48, 0x61, 0x73, 0x68)
	o = msgp.AppendString(o, z.LockedErc20Hash)
	// string "leHeight"
	o = append(o, 0xa8, 0x6c, 0x65, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74)
	o = msgp.AppendUint32(o, z.LockedErc20Height)
	// string "unHash"
	o = append(o, 0xa6, 0x75, 0x6e, 0x48, 0x61, 0x73, 0x68)
	o = msgp.AppendString(o, z.UnlockedNep5Hash)
	// string "unHeight"
	o = append(o, 0xa8, 0x75, 0x6e, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74)
	o = msgp.AppendUint32(o, z.UnlockedNep5Height)
	// string "ueHash"
	o = append(o, 0xa6, 0x75, 0x65, 0x48, 0x61, 0x73, 0x68)
	o = msgp.AppendString(o, z.UnlockedErc20Hash)
	// string "ueHeight"
	o = append(o, 0xa8, 0x75, 0x65, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74)
	o = msgp.AppendUint32(o, z.UnlockedErc20Height)
	// string "startTime"
	o = append(o, 0xa9, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65)
	o = msgp.AppendInt64(o, z.StartTime)
	// string "lastModifyTime"
	o = append(o, 0xae, 0x6c, 0x61, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x54, 0x69, 0x6d, 0x65)
	o = msgp.AppendInt64(o, z.LastModifyTime)
	// string "neoTimeout"
	o = append(o, 0xaa, 0x6e, 0x65, 0x6f, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74)
	o = msgp.AppendBool(o, z.NeoTimeout)
	// string "ethTimeout"
	o = append(o, 0xaa, 0x65, 0x74, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74)
	o = msgp.AppendBool(o, z.EthTimeout)
	// string "fail"
	o = append(o, 0xa4, 0x66, 0x61, 0x69, 0x6c)
	o = msgp.AppendBool(o, z.Fail)
	// string "remark"
	o = append(o, 0xa6, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b)
	o = msgp.AppendString(o, z.Remark)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *LockerInfo) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			return
		}
		switch msgp.UnsafeString(field) {
		case "state":
			bts, err = z.State.UnmarshalMsg(bts)
			if err != nil {
				return
			}
		case "rHash":
			z.RHash, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				return
			}
		case "rOrigin":
			z.ROrigin, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				return
			}
		case "amount":
			z.Amount, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				return
			}
		case "erc20Addr":
			z.Erc20Addr, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				return
			}
		case "nep5Addr":
			z.Nep5Addr, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				return
			}
		case "lnHash":
			z.LockedNep5Hash, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				return
			}
		case "lnHeight":
			z.LockedNep5Height, bts, err = msgp.ReadUint32Bytes(bts)
			if err != nil {
				return
			}
		case "leHash":
			z.LockedErc20Hash, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				return
			}
		case "leHeight":
			z.LockedErc20Height, bts, err = msgp.ReadUint32Bytes(bts)
			if err != nil {
				return
			}
		case "unHash":
			z.UnlockedNep5Hash, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				return
			}
		case "unHeight":
			z.UnlockedNep5Height, bts, err = msgp.ReadUint32Bytes(bts)
			if err != nil {
				return
			}
		case "ueHash":
			z.UnlockedErc20Hash, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				return
			}
		case "ueHeight":
			z.UnlockedErc20Height, bts, err = msgp.ReadUint32Bytes(bts)
			if err != nil {
				return
			}
		case "startTime":
			z.StartTime, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				return
			}
		case "lastModifyTime":
			z.LastModifyTime, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				return
			}
		case "neoTimeout":
			z.NeoTimeout, bts, err = msgp.ReadBoolBytes(bts)
			if err != nil {
				return
			}
		case "ethTimeout":
			z.EthTimeout, bts, err = msgp.ReadBoolBytes(bts)
			if err != nil {
				return
			}
		case "fail":
			z.Fail, bts, err = msgp.ReadBoolBytes(bts)
			if err != nil {
				return
			}
		case "remark":
			z.Remark, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *LockerInfo) Msgsize() (s int) {
	s = 3 + 6 + z.State.Msgsize() + 6 + msgp.StringPrefixSize + len(z.RHash) + 8 + msgp.StringPrefixSize + len(z.ROrigin) + 7 + msgp.Int64Size + 10 + msgp.StringPrefixSize + len(z.Erc20Addr) + 9 + msgp.StringPrefixSize + len(z.Nep5Addr) + 7 + msgp.StringPrefixSize + len(z.LockedNep5Hash) + 9 + msgp.Uint32Size + 7 + msgp.StringPrefixSize + len(z.LockedErc20Hash) + 9 + msgp.Uint32Size + 7 + msgp.StringPrefixSize + len(z.UnlockedNep5Hash) + 9 + msgp.Uint32Size + 7 + msgp.StringPrefixSize + len(z.UnlockedErc20Hash) + 9 + msgp.Uint32Size + 10 + msgp.Int64Size + 15 + msgp.Int64Size + 11 + msgp.BoolSize + 11 + msgp.BoolSize + 5 + msgp.BoolSize + 7 + msgp.StringPrefixSize + len(z.Remark)
	return
}
